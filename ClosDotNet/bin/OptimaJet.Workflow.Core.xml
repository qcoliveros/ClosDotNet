<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OptimaJet.Workflow.Core</name>
    </assembly>
    <members>
        <member name="T:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder">
            <summary>
            Interface of a workflow builder, which convert not parsed process scheme <see cref="T:OptimaJet.Workflow.Core.Model.SchemeDefinition`1"/> to the object model of a scheme of a process <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.CreateNewProcess(System.Guid,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create new instance of the process.
            </summary>
            <param name="processId">Process id</param>
            <param name="schemeCode">Code of the scheme</param>
            <param name="parameters">The parameters for creating the scheme of the process</param>
            <returns>ProcessInstance object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.CreateNewProcessScheme(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create new scheme for existing process
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="parameters">The parameters for creating scheme of process</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.GetProcessInstance(System.Guid)">
            <summary>
            Returns existing process instance
            </summary>
            <param name="processId">Process id</param>
            <returns>ProcessInstance object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.GetProcessScheme(System.Guid)">
            <summary>
            Returns process scheme by specific id, if scheme not exists creates it 
            </summary>
            <param name="schemeId">Id of the scheme</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.SetCache(OptimaJet.Workflow.Core.Cache.IParsedProcessCache)">
            <summary>
            Sets the cache to store parsed ProcessDefinition objects <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/> 
            </summary>
            <param name="cache">Instance of cache object</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.RemoveCache">
            <summary>
            Removes the cache to store parsed ProcessDefinition objects <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/> 
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.GetProcessScheme(System.String)">
            <summary>
            Returns process scheme by specific name, if scheme not exists creates it
            </summary>
            <param name="schemeCode">Name of the scheme</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.GetProcessScheme(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns process scheme by specific name and parameters for creating the scheme of the process, if scheme not exists creates it
            </summary>
            <param name="schemeCode">Name of the scheme</param>
            <param name="parameters">The parameters for creating the scheme of the process</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.SetSchemeIsObsolete(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Set IsObsolete sign to the scheme with specific name and parameters for creating the scheme of the process
            </summary>
            <param name="schemeCode">Name of the scheme</param>
            <param name="parameters">The parameters for creating the scheme of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.SetSchemeIsObsolete(System.String)">
            <summary>
            Set IsObsolete sign to the scheme with specific name
            </summary>
            <param name="schemeCode">Name of the scheme</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.GetProcessSchemeForDesigner(System.String)">
            <summary>
            Returns existing process scheme directly from scheme persistence store
            </summary>
            <param name="code">Name of the scheme</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.SaveProcessScheme(System.String,OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            Saves process scheme to scheme persistence store
            </summary>
            <param name="schemecode">Code of the scheme</param>
            <param name="pd">Object representation of the scheme</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.Parse(System.String)">
            <summary>
            Parses process scheme from the string
            </summary>
            <param name="scheme">String representation of not parsed scheme</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.Serialize(OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            Serialize process scheme to the string
            </summary>
            <param name="processDefinition">SProcessDefinition object</param>
            <returns>String representation of not parsed scheme</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1">
            <summary>
            Base workflow builder, which convert not parsed process scheme <see cref="T:OptimaJet.Workflow.Core.Model.SchemeDefinition`1"/> to the object model of a scheme of a process <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/>
            </summary>
            <typeparam name="TSchemeMedium">Type of not parsed scheme <see cref="T:OptimaJet.Workflow.Core.Model.SchemeDefinition`1"/></typeparam>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.#ctor(OptimaJet.Workflow.Core.Generator.IWorkflowGenerator{`0},OptimaJet.Workflow.Core.Parser.IWorkflowParser{`0},OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider{`0})">
            <summary>
            Create WorkflowBuilder object
            </summary>
            <param name="generator">Not parsed scheme generator <see cref="T:OptimaJet.Workflow.Core.Generator.IWorkflowGenerator`1"/></param>
            <param name="parser">Parser from not parsed process scheme <see cref="T:OptimaJet.Workflow.Core.Model.SchemeDefinition`1"/> to the object model of a scheme of a process <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/></param>
            <param name="schemePersistenceProvider">Scheme persistemce provider <see cref="T:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.GetProcessScheme(System.Guid)">
            <summary>
            Returns process scheme by specific id, if scheme not exists creates it 
            </summary>
            <param name="schemeId">Id of the scheme</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.GetProcessScheme(System.String)">
            <summary>
            Returns process scheme by specific name, if scheme not exists creates it
            </summary>
            <param name="schemeCode">Name of the scheme</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.GetProcessScheme(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns process scheme by specific name and parameters for creating the scheme of the process, if scheme not exists creates it
            </summary>
            <param name="schemeCode">Name of the scheme</param>
            <param name="parameters">The parameters for creating the scheme of the process</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.CreateNewProcess(System.Guid,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create new instance of the process.
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="processId">Process id</param>
            <param name="parameters">The parameters for creating the scheme of the process</param>
            <returns>ProcessInstance object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.GetProcessInstance(System.Guid)">
            <summary>
            Returns existing process instance
            </summary>
            <param name="processId">Process id</param>
            <returns>ProcessInstance object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.CreateNewProcessScheme(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create new scheme for existing process
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="parameters">The parameters for creating scheme of process</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.SetCache(OptimaJet.Workflow.Core.Cache.IParsedProcessCache)">
            <summary>
            Sets the cache to store parsed ProcessDefinition objects <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/> 
            </summary>
            <param name="cache">Instance of cache object</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.RemoveCache">
            <summary>
            Removes the cache to store parsed ProcessDefinition objects <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/> 
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.SetSchemeIsObsolete(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Set IsObsolete sign to the scheme with specific name and parameters for creating the scheme of the process
            </summary>
            <param name="schemeCode">Name of the scheme</param>
            <param name="parameters">The parameters for creating the scheme of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.SetSchemeIsObsolete(System.String)">
            <summary>
            Set IsObsolete sign to the scheme with specific name
            </summary>
            <param name="schemeCode">Name of the scheme</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.GetProcessSchemeForDesigner(System.String)">
            <summary>
            Returns existing process scheme directly from scheme persistence store
            </summary>
            <param name="code">Name of the scheme</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.SaveProcessScheme(System.String,OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            Saves process scheme to scheme persistence store
            </summary>
            <param name="schemecode">Code of the scheme</param>
            <param name="pd">Object representation of the scheme</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.Parse(System.String)">
            <summary>
            Parses process scheme from the string
            </summary>
            <param name="scheme">String representation of not parsed scheme</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.Serialize(OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            Serialize process scheme to the string
            </summary>
            <param name="processDefinition">SProcessDefinition object</param>
            <returns>String representation of not parsed scheme</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Bus.ActivityExecutor">
            <summary>
            Provides choice of activity for execution <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.Conditions"/> and execution of actions <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.Implementation"/> and <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.PreExecutionImplementation"/> in chosen activity
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.ActivityExecutor.#ctor(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Create ActivityExecutor object
            </summary>
            <param name="runtime">WorkflowRuntime instance which owned executor</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.ActivityExecutor.#ctor(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Boolean)">
            <summary>
            Create ActivityExecutor object
            </summary>
            <param name="runtime">WorkflowRuntime instance which owned executor</param>
            <param name="considerResultOnPreExecution">If true then Result Pre Execution will be considered in time of the check of conditions</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.ActivityExecutor.Execute(System.Collections.Generic.IEnumerable{OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters})">
            <summary>
            Provides choice of activity for execution <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.Conditions"/> and execution of actions <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.Implementation"/> and <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.PreExecutionImplementation"/> in chosen activity
            </summary>
            <param name="requestParameters">List of execution requests which contains conditions and actions <see cref="T:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters"/></param>
            <returns>Execution result</returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ActivityExecutor.ActionProvider">
            <summary>
            Returns action provider <see cref="T:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider"/> from associated workflow runtime 
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters">
            <summary>
            Represent execution request which contains conditions and actions
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters.Create(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Model.TransitionDefinition)">
            <summary>
            Create ExecutionRequestParameters object
            </summary>
            <param name="processInstance">Process instance which requested execution</param>
            <param name="transition">Executed transition</param>
            <returns>ExecutionRequestParameters object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters.Create(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Model.TransitionDefinition,System.Boolean)">
            <summary>
            Create ExecutionRequestParameters object
            </summary>
            <param name="processInstance">Process instance which requested execution</param>
            <param name="transition">Executed transition</param>
            <param name="isPreExecution">If true pre-execution implementation will be requested to execute <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.PreExecutionImplementation"/>, if false  implementation will be requested to execute <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.Implementation"/></param>
            <returns>ExecutionRequestParameters object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters.Create(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Model.ActivityDefinition,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ConditionDefinition})">
            <summary>
            Create ExecutionRequestParameters object
            </summary>
            <param name="processInstance">Process instance which requested execution</param>
            <param name="activityToExecute">Activity to execute</param>
            <param name="conditions">List of conditions to check</param>
            <returns>ExecutionRequestParameters object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters.Create(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Model.ActivityDefinition,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ConditionDefinition},System.Boolean)">
            <summary>
            Create ExecutionRequestParameters object
            </summary>
            <param name="processInstance">Process instance which requested execution</param>
            <param name="activityToExecute">Activity to execute</param>
            <param name="conditions">List of conditions to check</param>
            <param name="isPreExecution">If true pre-execution implementation will be requested to execute <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.PreExecutionImplementation"/>, if false  implementation will be requested to execute <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.Implementation"/></param>
            <returns>ExecutionRequestParameters object</returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters.ProcessInstance">
            <summary>
            Returns Process instance which requested execution 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters.ProcessId">
            <summary>
            Returns id of the process instance
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters.Methods">
            <summary>
            List of actions to execute in the case of conditions are satisfied
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters.Conditions">
            <summary>
            List of conditions to check
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters.TransitionName">
            <summary>
            Executed transition name
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters.ActivityName">
            <summary>
            Executed activity name <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.To"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters.ConditionsConcatenationType">
            <summary>
            Type of concatenation for conditions
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters.Activity">
            <summary>
            Activity to execute
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters.IsAlways">
            <summary>
            Returns true if condition type of the transition is equal "Always" <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Always"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters.IsOtherwise">
            <summary>
            Returns true if condition type of the transition is equal "Otherwise" <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Otherwise"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters.IsCondition">
            <summary>
            Returns true if condition type of the transition is equal "Action" <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Action"/>
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Bus.ExecutionResponseEventArgs">
            <summary>
            Represent Event args with a execution result <see cref="T:OptimaJet.Workflow.Core.Bus.ActivityExecutor"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.ExecutionResponseEventArgs.#ctor(OptimaJet.Workflow.Core.Bus.ExecutionResponseParameters)">
            <summary>
            Create ExecutionResponseEventArgs object
            </summary>
            <param name="parameters">Execution result</param>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionResponseEventArgs.Parameters">
            <summary>
            Execution result
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Bus.ExecutionResponseParameters">
            <summary>
            Represent execution result which contains information about execution
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.ExecutionResponseParameters.Create(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String)">
            <summary>
            Create ExecutionResponseParametersComplete object
            </summary>
            <param name="processInstance">Process instance which requested execution </param>
            <param name="executedActivityName">Activity name which was executed</param>
            <returns>ExecutionResponseParametersComplete object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.ExecutionResponseParameters.Create(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String,System.String)">
            <summary>
            Create ExecutionResponseParametersComplete object
            </summary>
            <param name="processInstance">Process instance which requested execution </param>
            <param name="executedActivityName">Activity name which was executed</param>
            <param name="executedTransitionName">Transition name which was executed</param>
            <returns>ExecutionResponseParametersComplete object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.ExecutionResponseParameters.Create(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String,System.Exception)">
            <summary>
            Create ExecutionResponseParametersError object
            </summary>
            <param name="processInstance">Process instance which requested execution </param>
            <param name="executedActivityName">Activity name which was executed</param>
            <param name="exception">Exception which occured in time of execution</param>
            <returns>ExecutionResponseParametersError object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.ExecutionResponseParameters.Create(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String,System.String,System.Exception)">
            <summary>
            Create ExecutionResponseParametersError object
            </summary>
            <param name="processInstance">Process instance which requested execution </param>
            <param name="executedActivityName">Activity name which was executed</param>
            <param name="executedTransitionName">Transition name which was executed</param>
            <param name="exception">Exception which occured in time of execution</param>
            <returns>ExecutionResponseParametersError object</returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionResponseParameters.ProcessId">
            <summary>
            Returns id of the process instance
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionResponseParameters.ProcessInstance">
            <summary>
            Returns Process instance which requested execution 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionResponseParameters.ExecutedTransitionName">
            <summary>
            Transition name which was executed
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionResponseParameters.ExecutedActivityName">
            <summary>
            Activity name which was executed
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionResponseParameters.IsError">
            <summary>
            If True means execution error
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionResponseParameters.IsEmplty">
            <summary>
            Return True if ExecutionResponseParameters is empty
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionResponseParameters.Empty">
            <summary>
            Returns instane of empty ExecutionResponseParameters
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Bus.ExecutionResponseParametersComplete">
            <summary>
            Represent execution result completed without errors
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Bus.ExecutionResponseParametersError">
            <summary>
            Represent execution result completed with errors
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionResponseParametersError.IsError">
            <summary>
            If True means execution error
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionResponseParametersError.Exception">
            <summary>
            Exception which occured in time of execution
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Bus.IWorkflowBus">
            <summary>
             Interface of a bus, which provide control over execution of activities and actions
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.IWorkflowBus.Initialize(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Initialize the bus
            </summary>
            <param name="runtime">WorkflowRuntime instance which owned the bus</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.IWorkflowBus.Start">
            <summary>
            Starts the bus
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.IWorkflowBus.QueueExecution(System.Collections.Generic.IEnumerable{OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters})">
            <summary>
            Queue execution with the list of <see cref="T:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters"/>
            </summary>
            <param name="requestParameters">List of <see cref="T:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.IWorkflowBus.QueueExecution(OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters)">
            <summary>
            Queue execution with the <see cref="T:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters"/>
            </summary>
            <param name="requestParameters">Instance of <see cref="T:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters"/></param>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Bus.IWorkflowBus.ExecutionComplete">
            <summary>
            Event raised after the execution was complete
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.IWorkflowBus.IsAsync">
            <summary>
            Returns true if the bus supports asynchronous model of execution
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Bus.NullBus">
            <summary>
            Represent simple synchronous <see cref="T:OptimaJet.Workflow.Core.Bus.IWorkflowBus"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.NullBus.Initialize(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Initialize the bus
            </summary>
            <param name="runtime">WorkflowRuntime instance which owned the bus</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.NullBus.Start">
            <summary>
            Starts the bus
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.NullBus.QueueExecution(System.Collections.Generic.IEnumerable{OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters})">
            <summary>
            Queue execution with the list of <see cref="T:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters"/>
            </summary>
            <param name="requestParameters">List of <see cref="T:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.NullBus.QueueExecution(OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters)">
            <summary>
            Queue execution with the <see cref="T:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters"/>
            </summary>
            <param name="requestParameters">Instance of <see cref="T:OptimaJet.Workflow.Core.Bus.ExecutionRequestParameters"/></param>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Bus.NullBus.ExecutionComplete">
            <summary>
            Event raised after the execution was complete
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.NullBus.IsAsync">
            <summary>
            Returns true if the bus supports asynchronous model of execution
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Cache.DefaultParcedProcessCache">
            <summary>
            Default cache <see cref="T:OptimaJet.Workflow.Core.Cache.IParsedProcessCache"/> for parced processes <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/>
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Cache.IParsedProcessCache">
            <summary>
            Interface of a cache for parced processes <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Cache.IParsedProcessCache.Clear">
            <summary>
            Clear the cache
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Cache.IParsedProcessCache.GetProcessDefinitionBySchemeId(System.Guid)">
            <summary>
            Returns process definition from the cache by scheme id
            </summary>
            <param name="schemeId">Id of the scheme</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Cache.IParsedProcessCache.AddProcessDefinition(System.Guid,OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            Adds process definition to the cache with scheme id as the key
            </summary>
            <param name="schemeId">Id of the scheme</param>
            <param name="processDefinition">ProcessDefinition object</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Cache.DefaultParcedProcessCache.Clear">
            <summary>
            Clear the cache
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Cache.DefaultParcedProcessCache.GetProcessDefinitionBySchemeId(System.Guid)">
            <summary>
            Returns process definition from the cache by scheme id, if process definition is not exists in the cache returns null
            </summary>
            <param name="schemeId">Id of the scheme</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Cache.DefaultParcedProcessCache.AddProcessDefinition(System.Guid,OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            Adds process definition to the cache with scheme id as the key
            </summary>
            <param name="schemeId">Id of the scheme</param>
            <param name="processDefinition">ProcessDefinition object</param>
        </member>
        <member name="T:OptimaJet.Workflow.Core.CodeActions.CodeActionsCompiller">
            <summary>
            Provides compillation of code actions
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.CodeActions.CodeActionsInvoker">
            <summary>
            Provides invoke of code actions by name
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Designer">
            <summary>
            Extension which provides API for HTML5 Workflow Designer
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Designer.DesignerAPI(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Collections.Specialized.NameValueCollection,System.IO.Stream,System.Boolean)">
            <summary>
            API for HTML5 Workflow Designer. Contains following operations:
            - bool exists(schemecode, schemeid, processid) Checks existence of the scheme of the process with specific code, id or id of the process 
            - JSON load(schemecode, schemeid, processid) Returns the scheme of the process in JSON format by specific code, id or id of the process 
            - JSON save(schemecode, data) Saves the scheme with specified code. Ruturns updated scheme.
            - JSON uploadscheme(filestream) Converts scheme uploaded as XML file to JSON.
            - XML downloadscheme(data) Converts scheme from JSON object to XML.
            - object compile(data) Method for test compile of code actions
            Type of the operation determined by "operation" parameter from request parameters 
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="form">Parameters from request. Allowed parameters is: "operation", "schemecode", "schemeid", "processid", "data"</param>
            <param name="filestream">Stream which represent uploaded file</param>
            <param name="setIsObsoleForOperationSave">If true and operation is "save" IsObsolete property will be set to all shemes of processes with specified code</param>
            <returns>Operation execution result</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Generator.IWorkflowGenerator`1">
            <summary>
            Interface of a workflow generator, which generate not parsed process scheme <see cref="T:OptimaJet.Workflow.Core.Model.SchemeDefinition`1"/> 
            </summary>
            <typeparam name="TSchemeMedium">Type of not parsed scheme</typeparam>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Generator.IWorkflowGenerator`1.Generate(System.String,System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Generate not parsed process scheme
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="schemeId">Id of the scheme</param>
            <param name="parameters">Parameters for creating scheme</param>
            <returns>Not parsed process scheme</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Generator.TTXmlWorkflowGenerator">
            <summary>
            Generate process scheme from TT template
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Generator.TTXmlWorkflowGenerator.Generate(System.String,System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Generate not parsed process scheme
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="schemeId">Id of the scheme</param>
            <param name="parameters">Parameters for creating scheme</param>
            <returns>Not parsed process scheme</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Generator.TTXmlWorkflowGenerator.AddMapping(System.String,System.Object)">
            <summary>
            Adds relationship between code of the scheme and TT template type
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="generatorSource">TT template type</param>
        </member>
        <member name="T:OptimaJet.Workflow.Core.License.WorkflowEngineNetRestrictions">
            <summary>
            Represent restriction settings for WorkflowEngine .Net
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.License.LicenseKey`1">
            <summary>
            Represent a license key
            </summary>
            <typeparam name="T">Type of restriction object</typeparam>
        </member>
        <member name="T:OptimaJet.Workflow.Core.License.Licensing">
            <summary>
            License help methods
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ActionDefinitionReference">
            <summary>
            Represent a reference on action in a process scheme
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ActionDefinitionReference.Create(System.String,System.String,System.String)">
            <summary>
            Create ActionDefinitionReference object
            </summary>
            <param name="actionName">Name of the action</param>
            <param name="order">Execution order of the action</param>
            <param name="parameter">Additional parameter which is passed to the appropriate methods <see cref="T:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider"/></param>
            <returns>ActionDefinitionReference object</returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActionDefinitionReference.ActionName">
            <summary>
            Name of the action
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActionDefinitionReference.Order">
            <summary>
            Execution order of the action
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActionDefinitionReference.ActionParameter">
            <summary>
            Additional parameter which is passed to the appropriate methods <see cref="T:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider"/>
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ActivityDefinition">
            <summary>
            Represent an activity in a process scheme
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.BaseDefinition">
            <summary>
            Represent a base object in a process scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.BaseDefinition.Name">
            <summary>
            Name of the object in scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.BaseDefinition.DesignerSettings">
            <summary>
            Designer settings which used be Workflow Designer
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ActivityDefinition.Create(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Create ActivityDefinition object
            </summary>
            <param name="name">Name of the activity</param>
            <param name="stateName">Name of the state</param>
            <param name="isInitial">If true specifies that the activity is final. The process is marked as finalized after execution of the activity marked as final.</param>
            <param name="isFinal">If true specifies that the activity is final. The process is marked as finalized after execution of the activity marked as final.</param>
            <param name="isForSetState">If true specifies that the activity is entry point for a state and possible to set the state with the <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.State"/> name via <see cref="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetState(System.Guid,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)"/> method</param>
            <param name="isAutoSchemeUpdate">If true specifies that  if process scheme obsolete than Workflow Runtime will try upgrade it automatically if this activity is current</param>
            <returns>ActivityDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ActivityDefinition.Create(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Create ActivityDefinition object
            </summary>
            <param name="name">Name of the activity</param>
            <param name="stateName">Name of the state</param>
            <param name="isInitial">If true specifies that the activity is final. The process is marked as finalized after execution of the activity marked as final.</param>
            <param name="isFinal">If true specifies that the activity is final. The process is marked as finalized after execution of the activity marked as final.</param>
            <param name="isForSetState">If true specifies that the activity is entry point for a state and possible to set the state with the <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.State"/> name via <see cref="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetState(System.Guid,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)"/> method</param>
            <param name="isAutoSchemeUpdate">If true specifies that  if process scheme obsolete than Workflow Runtime will try upgrade it automatically if this activity is current</param>
            <returns>ActivityDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ActivityDefinition.AddAction(OptimaJet.Workflow.Core.Model.ActionDefinitionReference)">
            <summary>
            Add <see cref="T:OptimaJet.Workflow.Core.Model.ActionDefinitionReference"/> to implementation list
            </summary>
            <param name="action">Action reference</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ActivityDefinition.AddPreExecutionAction(OptimaJet.Workflow.Core.Model.ActionDefinitionReference)">
            <summary>
            Add <see cref="T:OptimaJet.Workflow.Core.Model.ActionDefinitionReference"/> to pre-execution implementation list
            </summary>
            <param name="action">Action reference</param>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.State">
            <summary>
            Name of the state
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.IsInitial">
            <summary>
            If true specifies that the activity is initial. There can be only one initial activity in scheme. Initial activity is the entry point of the process.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.IsFinal">
            <summary>
            If true specifies that the activity is final. The process is marked as finalized after execution of the activity marked as final.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.IsForSetState">
            <summary>
            If true specifies that the activity is entry point for a state and possible to set the state with the <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.State"/> name via <see cref="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetState(System.Guid,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)"/> method
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.IsAutoSchemeUpdate">
            <summary>
            If true specifies that  if process scheme obsolete than Workflow Runtime will try upgrade it automatically if this activity is current
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.HaveImplementation">
            <summary>
            Specifies that activity have an implementation
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.HavePreExecutionImplementation">
            <summary>
            Specifies that activity have a pre-execution implementation
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.Implementation">
            <summary>
            List of <see cref="T:OptimaJet.Workflow.Core.Model.ActionDefinitionReference"/> which are executed at standard workflow execution
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.PreExecutionImplementation">
            <summary>
            List of <see cref="T:OptimaJet.Workflow.Core.Model.ActionDefinitionReference"/> which are executed at pre-execution
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.IsState">
            <summary>
            Specifies that state is assigned
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.NestingLevel">
            <summary>
            Nesting level of subprocess, 0 - root process, 1-... -subprocesses, null - not assigned
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ActorDefinition">
            <summary>
            Represent an actor in a process scheme
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ActorDefinition.Create(System.String,System.String,System.String)">
            <summary>
            Create ActorDefinition object
            </summary>
            <param name="name">Name of the actor</param>
            <param name="rule">Rule name which is associated with the actor</param>
            <param name="value">Additional parameter which is passed to the appropriate methods <see cref="T:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider"/></param>
            <returns>ActorDefinition object</returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActorDefinition.Rule">
            <summary>
            Rule name which is associated with the actor
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActorDefinition.Value">
            <summary>
            Additional parameter which is passed to the appropriate methods <see cref="T:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider"/>
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.CodeActionType">
            <summary>
            Type of a code action which determine a area of use of a code action
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.CodeActionType.Action">
            <summary>
            Code action uses like an action <see cref="M:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider.ExecuteAction(System.String,OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String)"/>
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.CodeActionType.Condition">
            <summary>
            Code action uses like a condition <see cref="M:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider.ExecuteCondition(System.String,OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String)"/>
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.CodeActionType.RuleGet">
            <summary>
            Code action uses like users get method <see cref="M:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider.GetIdentities(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String,System.String)"/>
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.CodeActionType.RuleCheck">
            <summary>
            Code action uses like check rule method <see cref="M:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider.Check(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.CodeActionDefinition">
            <summary>
            Represent a code action in a process scheme
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.CodeActionDefinition.Create(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create CodeActionDefinition object
            </summary>
            <param name="name">Name of the code action</param>
            <param name="usings">List of usings separated by ;</param>
            <param name="actionCode">Source code of the code action</param>
            <param name="isglobal">If true specifies that the code action stored in global parameters but not in scheme. In this case code action is shared between schemes</param>
            <param name="type">ype of the code action <see cref="T:OptimaJet.Workflow.Core.Model.CodeActionType"/></param>
            <returns>CodeActionDefinition object</returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.CodeActionDefinition.ActionCode">
            <summary>
            Source code of the code action
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.CodeActionDefinition.Type">
            <summary>
            Type of the code action <see cref="T:OptimaJet.Workflow.Core.Model.CodeActionType"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.CodeActionDefinition.IsGlobal">
            <summary>
            If true specifies that the code action stored in global parameters but not in scheme. In this case code action is shared between schemes
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.CodeActionDefinition.Usings">
            <summary>
            List of usings separated by ;
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.CommandDefinition">
            <summary>
            Represent a command in a process scheme
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.CommandDefinition.Create(System.String)">
            <summary>
            Create CommandDefinition object
            </summary>
            <param name="name">Name of the command</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.CommandDefinition.AddParameterRef(System.String,OptimaJet.Workflow.Core.Model.ParameterDefinition)">
            <summary>
            Add the reference on the parameter to InputParameters collection
            </summary>
            <param name="name"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.CommandDefinition.InputParameters">
            <summary>
            List of references on parameters <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionReference"/>
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionReference">
            <summary>
             Represent a named reference on a parameter in a process scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ParameterDefinitionReference.Name">
            <summary>
            Name of the reference
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ParameterDefinitionReference.Parameter">
            <summary>
            Parameter definition
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.TriggerDefinition">
            <summary>
            Represent a transition's trigger in a process scheme
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.TriggerDefinition.#ctor(OptimaJet.Workflow.Core.Model.TriggerType)">
            <summary>
            Create TriggerDefinition object
            </summary>
            <param name="type">Type of the trigger <see cref="T:OptimaJet.Workflow.Core.Model.TriggerType"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.TriggerDefinition.Create(System.String)">
            <summary>
            Create TriggerDefinition object
            </summary>
            <param name="type">Type of the trigger <see cref="T:OptimaJet.Workflow.Core.Model.TriggerType"/></param>
            <returns>TriggerDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.TriggerDefinition.Clone(System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.CommandDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TimerDefinition})">
            <summary>
            Clones TriggerDefinition object replacing references to the references to the specific objects
            </summary>
            <param name="commandDefinitions">List of the commands to replace</param>
            <param name="timerDefinitions">List of the timers to replace</param>
            <returns>Cloned TriggerDefinition object</returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TriggerDefinition.Type">
            <summary>
            Type of the trigger <see cref="T:OptimaJet.Workflow.Core.Model.TriggerType"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TriggerDefinition.NameRef">
            <summary>
            Returns the name of the object in scheme which start the trigger
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TriggerDefinition.Command">
            <summary>
            Command which start the trigger if the type of the trigger is command <see cref="F:OptimaJet.Workflow.Core.Model.TriggerType.Command"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TriggerDefinition.Timer">
            <summary>
            Timer which start the trigger if the type of the trigger is timer <see cref="F:OptimaJet.Workflow.Core.Model.TriggerType.Timer"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TriggerDefinition.Auto">
            <summary>
            Create the instance of TriggerDefinition object with auto trigger type <see cref="F:OptimaJet.Workflow.Core.Model.TriggerType.Auto"/>
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.TriggerType">
            <summary>
            Type of impact that lead to the triggering of a transition
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TriggerType.Command">
            <summary>
            Transition starts by a command
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TriggerType.Auto">
            <summary>
            Transition starts automatically, without any impact
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TriggerType.Timer">
            <summary>
            Transition starts by a timer
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ConditionDefinition">
            <summary>
            Represent a transition's condition in a process scheme
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ConditionDefinition.Create(System.String,System.String)">
            <summary>
            Create ConditionDefinition object
            </summary>
            <param name="type">Type of the condition <see cref="T:OptimaJet.Workflow.Core.Model.ConditionType"/></param>
            <param name="resultOnPreExecution">In pre-execution mode if not null the result of the condition will be overriden by the value</param>
            <returns>ConditionDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ConditionDefinition.Create(System.String,OptimaJet.Workflow.Core.Model.ActionDefinitionReference,System.String,System.String)">
            <summary>
            Create ConditionDefinition object
            </summary>
            <param name="type">Type of the condition <see cref="T:OptimaJet.Workflow.Core.Model.ConditionType"/></param>
            <param name="action">Referensce on the action if condition type is action <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Action"/> </param>
            <param name="conditionInversion">If true invert condition result if condition type is action <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Action"/> </param>
            <param name="resultOnPreExecution">In pre-execution mode if not null the result of the condition will be overriden by the value</param>
            <returns>ConditionDefinition object</returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ConditionDefinition.Type">
            <summary>
            Type of the condition <see cref="T:OptimaJet.Workflow.Core.Model.ConditionType"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ConditionDefinition.Action">
            <summary>
            Referensce on the action if condition type is action <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Action"/> 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ConditionDefinition.ResultOnPreExecution">
            <summary>
            In pre-execution mode if not null the result of the condition will be overriden by the value
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ConditionDefinition.ConditionInversion">
            <summary>
            If true invert condition result if condition type is action <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Action"/> 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ConditionDefinition.Always">
            <summary>
            Create the instance of ConditionDefinition object with always type <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Always"/>
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ConditionType">
            <summary>
            Type of condition for triggering of transition
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ConditionType.Action">
            <summary>
            Transition triggering if executed action returns true <see cref="M:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider.ExecuteCondition(System.String,OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String)"/>
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ConditionType.Always">
            <summary>
            Transition starts always in priority order
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ConditionType.Otherwise">
            <summary>
            Transition starts always in lowest order
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.DesignerSettings">
            <summary>
            Represent settings used by Workflow Designer
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.LocalizeType">
            <summary>
            Type of localized resource
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.LocalizeType.Command">
            <summary>
            Command <see cref="!:CommandDefinition.Name"/>
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.LocalizeType.State">
            <summary>
            Command <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.State"/>
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.LocalizeType.Parameter">
            <summary>
            Command <see cref="P:OptimaJet.Workflow.Core.Model.ParameterDefinitionReference.Name"/>
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.LocalizeDefinition">
            <summary>
            Represent a localization record in a process scheme
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.LocalizeDefinition.Create(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create LocalizeDefinition object
            </summary>
            <param name="objectName">System name</param>
            <param name="type">Type of localized resource <see cref="T:OptimaJet.Workflow.Core.Model.LocalizeType"/></param>
            <param name="culture">Culture name</param>
            <param name="value">Localized name</param>
            <param name="isDefault">If true specifies that the record will be used by default in case of absence of a record with specific culture</param>
            <returns>LocalizeDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.LocalizeDefinition.Create(System.String,OptimaJet.Workflow.Core.Model.LocalizeType,System.String,System.String,System.Boolean)">
            <summary>
            Create LocalizeDefinition object
            </summary>
            <param name="objectName">System name</param>
            <param name="type">Type of localized resource <see cref="T:OptimaJet.Workflow.Core.Model.LocalizeType"/></param>
            <param name="culture">Culture name</param>
            <param name="value">Localized name</param>
            <param name="isDefault">If true specifies that the record will be used by default in case of absence of a record with specific culture</param>
            <returns>LocalizeDefinition object</returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.LocalizeDefinition.Type">
            <summary>
            Type of localized resource <see cref="T:OptimaJet.Workflow.Core.Model.LocalizeType"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.LocalizeDefinition.IsDefault">
            <summary>
            If true specifies that the record will be used by default in case of absence of a record with specific culture
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.LocalizeDefinition.ObjectName">
            <summary>
            System name
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.LocalizeDefinition.Culture">
            <summary>
            Culture name
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.LocalizeDefinition.Value">
            <summary>
            Localized name
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ParameterDefinition">
            <summary>
            Represent a parameter in a process scheme
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ParameterDefinition.Create(System.String,System.String,System.String,System.String)">
            <summary>
            Create ParameterDefinition object
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="type">Type of the parameter</param>
            <param name="purpose">Specifies the method of storing parameters <see cref="T:OptimaJet.Workflow.Core.Model.ParameterPurpose"/></param>
            <param name="serializedValue">Serialized default value of the parameter</param>
            <returns>ParameterDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ParameterDefinition.Create(System.String,System.Type,OptimaJet.Workflow.Core.Model.ParameterPurpose,System.String)">
            <summary>
            Create ParameterDefinition object
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="type">Type of the parameter</param>
            <param name="purpose">Specifies the method of storing parameters <see cref="T:OptimaJet.Workflow.Core.Model.ParameterPurpose"/></param>
            <param name="serializedValue">Serialized default value of the parameter</param>
            <returns>ParameterDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ParameterDefinition.Create(System.String,System.String,System.String)">
            <summary>
            Create ParameterDefinition object
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="type">Type of the parameter</param>
            <param name="serializedValue">Serialized default value of the parameter</param>
            <returns>ParameterDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ParameterDefinition.Create(OptimaJet.Workflow.Core.Model.ParameterDefinition,System.Object)">
            <summary>
            Create ParameterDefinitionWithValue object 
            </summary>
            <param name="parameterDefinition">Parameter object</param>
            <param name="value">Value of the parameter</param>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ParameterDefinition.Type">
            <summary>
            Type of the parameter
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ParameterDefinition.Purpose">
            <summary>
            Specifies the method of storing parameters <see cref="T:OptimaJet.Workflow.Core.Model.ParameterPurpose"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ParameterDefinition.SerializedDefaultValue">
            <summary>
            Serialized default value of the parameter
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue">
            <summary>
             Represent a parameter in a process scheme vith value
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue.Name">
            <summary>
            Name of the parameter
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue.Purpose">
            <summary>
            Specifies the method of storing parameters <see cref="T:OptimaJet.Workflow.Core.Model.ParameterPurpose"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue.Type">
            <summary>
            Type of the parameter
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue.Value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ParameterPurpose">
            <summary>
            Specifies the method of storing parameters
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ParameterPurpose.Temporary">
            <summary>
            Is not stored and only exists during transition execution
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ParameterPurpose.Persistence">
            <summary>
            Is stored in persistence store <see cref="T:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider"/>
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ParameterPurpose.System">
            <summary>
            Is system, storing can be different
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ProcessDefinition">
            <summary>
            Represents object model of a scheme of a process
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.FindActivity(System.String)">
            <summary>
            Returns activity with specific name
            </summary>
            <param name="name">Name of the activity <see cref="!:ActivityDefinition.Name"/></param>
            <returns>ActivityDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.FindCommand(System.String)">
            <summary>
            Returns command with specific name
            </summary>
            <param name="name">Name of the command <see cref="!:CommandDefinition.Name"/></param>
            <returns>CommandDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.FindActor(System.String)">
            <summary>
            Returns actor with specific name
            </summary>
            <param name="name">Name of the actor <see cref="!:ActorDefinition.Name"/></param>
            <returns>ActorDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.FindParameterDefinition(System.String)">
            <summary>
            Returns the parameter specific name 
            </summary>
            <param name="name">&gt;Name of the parameter <see cref="!:ParameterDefinition.Name"/></param>
            <returns>ParameterDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.FindTransition(System.String)">
            <summary>
            Returns transition with specific name
            </summary>
            <param name="name">Name of the transition <see cref="!:TransitionDefinition.Name"/></param>
            <returns>TransitionDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.FindTransitions(OptimaJet.Workflow.Core.Model.ActivityDefinition,OptimaJet.Workflow.Core.Model.ActivityDefinition)">
            <summary>
            Returns transitions linked by specified activities
            </summary>
            <param name="from">From activity <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/></param>
            <param name="to">To activity <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.To"/></param>
            <returns>List of TransitionDefinition objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.GetPossibleTransitionsForActivity(OptimaJet.Workflow.Core.Model.ActivityDefinition,OptimaJet.Workflow.Core.Model.ForkTransitionSearchType)">
            <summary>
            Returns the list of all outgoing transitions for specific activity
            </summary>
            <param name="activity">Activity definition</param>
            <param name="forkTransitionSearch">Search filter for fork transitions</param>
            <returns>List of all outgoing transitions</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.GetCommandTransitions(OptimaJet.Workflow.Core.Model.ActivityDefinition,OptimaJet.Workflow.Core.Model.ForkTransitionSearchType)">
            <summary>
            Returns the list of all outgoing command transitions for specific activity <see cref="F:OptimaJet.Workflow.Core.Model.TriggerType.Command"/>
            </summary>
            <param name="activity">Activity definition</param>
              /// <param name="forkTransitionSearch">Search filter for fork transitions</param>
            <returns>List of all outgoing command transitions</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.GetAutoTransitionForActivity(OptimaJet.Workflow.Core.Model.ActivityDefinition,OptimaJet.Workflow.Core.Model.ForkTransitionSearchType)">
            <summary>
            Returns the list of all outgoing auto transitions for specific activity <see cref="F:OptimaJet.Workflow.Core.Model.TriggerType.Auto"/>
            </summary>
            <param name="activity">Activity definition</param>
            <param name="forkTransitionSearch">Search filter for fork transitions</param>
            <returns>List of all outgoing auto transitions</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.GetCommandTransitionForActivity(OptimaJet.Workflow.Core.Model.ActivityDefinition,System.String,OptimaJet.Workflow.Core.Model.ForkTransitionSearchType)">
            <summary>
            Returns the list of all outgoing command transitions for specific activity <see cref="F:OptimaJet.Workflow.Core.Model.TriggerType.Command"/> whis specific command name <see cref="!:CommandDefinition.Name"/>
            </summary>
            <param name="activity">Activity definition</param>
            <param name="commandName">Name of the command</param>
            <param name="forkTransitionSearch">Search filter for fork transitions</param>
            <returns>List of all outgoing command transitions whis specific command name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.GetTimerTransitionForActivity(OptimaJet.Workflow.Core.Model.ActivityDefinition,OptimaJet.Workflow.Core.Model.ForkTransitionSearchType)">
            <summary>
            Returns the list of all outgoing timer transitions for specific activity <see cref="F:OptimaJet.Workflow.Core.Model.TriggerType.Timer"/>
            </summary>
            <param name="activity">Activity definition</param>
            <param name="forkTransitionSearch">Search filter for fork transitions</param>
            <returns>List of all outgoing timer transitions</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.Create(System.String,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ActorDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ParameterDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.CommandDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TimerDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ActivityDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TransitionDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.LocalizeDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.CodeActionDefinition},OptimaJet.Workflow.Core.Model.DesignerSettings)">
            <summary>
            Create ProcessDefinition object
            </summary>
            <param name="name">Name of the scheme</param>
            <param name="actors">List of actors <see cref="T:OptimaJet.Workflow.Core.Model.ActorDefinition"/></param>
            <param name="parameters">List of parameters <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinition"/></param>
            <param name="commands">List of commands <see cref="T:OptimaJet.Workflow.Core.Model.CommandDefinition"/></param>
            <param name="timers">List of timers <see cref="T:OptimaJet.Workflow.Core.Model.TimerDefinition"/></param>
            <param name="activities">List of activities <see cref="T:OptimaJet.Workflow.Core.Model.ActivityDefinition"/></param>
            <param name="transitions">List of transitions <see cref="T:OptimaJet.Workflow.Core.Model.TransitionDefinition"/></param>
            <param name="localization">List of localization items <see cref="T:OptimaJet.Workflow.Core.Model.LocalizeDefinition"/></param>
            <param name="codeActions"> List of code actions <see cref="T:OptimaJet.Workflow.Core.Model.CodeActionDefinition"/></param>
            <param name="designerSettigs">Designer settings</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.GetLocalizedStateName(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns localized state name in specific culture
            </summary>
            <param name="stateName">System state name</param>
            <param name="culture">Culture</param>
            <returns>Localized state name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.GetLocalizedCommandName(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns localized command name in specific culture
            </summary>
            <param name="commandName">System command name</param>
            <param name="culture">Culture</param>
            <returns>Localized command name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.GetLocalizedParameterName(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns localized parameter name in specific culture
            </summary>
            <param name="parameterName">System parameter name</param>
            <param name="culture">Culture</param>
            <returns>Localized parameter name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.Clone(System.Boolean,System.Boolean)">
            <summary>
             Clones ProcessDefinition object
            </summary>
            <param name="doNotCloneActivities">If True activity list will be empty after cloning</param>
            <param name="doNotCloneTransitions">If True transition list will be empty after cloning</param>
            <returns>Cloned ProcessDefinition object</returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.CodeActionsInvoker">
            <summary>
            Code action invoker with compilled code actions
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.Actors">
            <summary>
            List of actors <see cref="T:OptimaJet.Workflow.Core.Model.ActorDefinition"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.Parameters">
            <summary>
            List of parameters <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinition"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.Commands">
            <summary>
            List of commands <see cref="T:OptimaJet.Workflow.Core.Model.CommandDefinition"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.Timers">
            <summary>
            List of timers <see cref="T:OptimaJet.Workflow.Core.Model.TimerDefinition"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.Activities">
            <summary>
            List of activities <see cref="T:OptimaJet.Workflow.Core.Model.ActivityDefinition"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.Transitions">
            <summary>
            List of transitions <see cref="T:OptimaJet.Workflow.Core.Model.TransitionDefinition"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.Localization">
            <summary>
            List of localization items <see cref="T:OptimaJet.Workflow.Core.Model.LocalizeDefinition"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.CodeActions">
            <summary>
            List of code actions <see cref="T:OptimaJet.Workflow.Core.Model.CodeActionDefinition"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.AdditionalParams">
            <summary>
            Additional parameters used by Workflow Designer
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.InitialActivity">
            <summary>
            Returns initial activity of the scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.ParametersForSerialize">
            <summary>
            Returns all parameter definitions except system <see cref="P:OptimaJet.Workflow.Core.Model.ParameterDefinition.Purpose"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.PersistenceParameters">
            <summary>
            Returns all persisted parameter definitions <see cref="P:OptimaJet.Workflow.Core.Model.ParameterDefinition.Purpose"/> 
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ProcessInstance">
            <summary>
            Represent a instance of a specific process 
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.Create(System.Guid,System.Guid,OptimaJet.Workflow.Core.Model.ProcessDefinition,System.Boolean,System.Boolean)">
            <summary>
            Create ProcessInstance object
            </summary>
            <param name="schemeId">Id of the scheme of the process</param>
            <param name="processId">Id of the process</param>
            <param name="processScheme">Parsed scheme of the process</param>
            <param name="isSchemeObsolete">Sign that the scheme of the process is obsolete</param>
            <param name="isDeterminingParametersChanged">Sign that parameters for creating scheme of the process was changed</param>
            <returns>ProcessInstance object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.AddParameter(OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue)">
            <summary>
            Adds parameter to process parameters collection
            </summary>
            <param name="parameter">Parameter with value <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.AddParameters(System.Collections.Generic.IEnumerable{OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue})">
            <summary>
            Adds parameters to process parameters collection
            </summary>
            <param name="parameters">Collection of parameters with value <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.GetParameter(System.String)">
            <summary>
            Returns parameter with value <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue"/> with specific name
            </summary>
            <param name="name">Name of the parameter</param>
            <returns>Parameter with value <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue"/></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.GetParameter``1(System.String)">
            <summary>
            Returns parameter's value by specific name
            </summary>
            <typeparam name="T">Type of the parameter</typeparam>
            <param name="name">Name of the parameter</param>
            <returns>Value of the parameter</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.SetParameter``1(System.String,``0,OptimaJet.Workflow.Core.Model.ParameterPurpose)">
            <summary>
            Set value of the parameter with specific name. If the definition of the parameter with specific name is absent in the scheme of the process <see cref="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.Parameters"/>,
            there will be creted Temporary parameter  <see cref="P:OptimaJet.Workflow.Core.Model.ParameterDefinition.Purpose"/> with specified name
            </summary>
            <typeparam name="T">Type of the parameter</typeparam>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.SetProcessParameters(System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue})">
            <summary>
            Replace process parameters collection by new value
            </summary>
            <param name="parameters">&gt;Collection of parameters with value <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.ExecuteConditionFromCodeActions(System.String,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String)">
            <summary>
            Check condition from global or local code actions with specific name
            </summary>
            <param name="name">Name of the condition to check</param>
            <param name="runtime">The instance of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime"/></param>
            <param name="parameter">Additional action parameter</param>
            <returns>Condition result</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.ExecuteCodeAction(System.String,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String)">
            <summary>
            Execute action from global or local code actions with specific name
            </summary>
            <param name="name">Name of the action to execute</param>
            <param name="runtime">The instance of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime"/></param>
            <param name="parameter">Additional action parameter</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.GetLocalizedStateName(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns localized state name in specific culture
            </summary>
            <param name="stateName">System state name</param>
            <param name="culture">Culture</param>
            <returns>Localized state name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.GetLocalizedCommandName(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns localized command name in specific culture
            </summary>
            <param name="commandName">System command name</param>
            <param name="culture">Culture</param>
            <returns>Localized command name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.GetLocalizedParameterName(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns localized parameter name in specific culture
            </summary>
            <param name="parameterName">System parameter name</param>
            <param name="culture">Culture</param>
            <returns>Localized parameter name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.ProcessParametersToString(OptimaJet.Workflow.Core.Model.ParameterPurpose)">
            <summary>
            Returns process parameters formatted to string
            </summary>
            <param name="purpose">Parameter purpose to filter parameters <see cref="T:OptimaJet.Workflow.Core.Model.ParameterPurpose"/></param>
            <returns>Formatted string with parameters values</returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.ProcessId">
            <summary>
            Returns Id of the process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.ParentProcessId">
            <summary>
            Returns Id of the parent process if this process is subprocess (parallel branch)
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.RootProcessId">
            <summary>
            Returns Id of the root process in the subprocesses hierarchy if this process is subprocess (parallel branch)
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.SchemeId">
            <summary>
            Returns Id of the scheme of the process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.PreviousState">
            <summary>
            Returns the name of the state  which was initial for last executed direct transition <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.ExecutedTimer">
            <summary>
            Returns the name of the currently executing timer, filled if the transition process was initiated by a timer 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.PreviousStateForDirect">
            <summary>
            Returns the name of the state  which was initial for last executed transition  marked as direct <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.PreviousStateForReverse">
            <summary>
            Returns the name of the state  which was initial for last executed transition marked as reverse <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.PreviousActivityName">
            <summary>
            Returns the name of the activity  which was initial for last executed transition <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.PreviousActivityForDirectName">
            <summary>
            Returns the name of the activity  which was initial for last executed transition marked as direct <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.PreviousActivityForReverseName">
            <summary>
            Returns the name of the activity  which was initial for last executed transition marked as reverse <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.CurrentCommand">
            <summary>
            Returns the name of the currently executing command, filled if the transition process was initiated by a command 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.IdentityId">
            <summary>
            Returns the user id which execute a command or set a state
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.ImpersonatedIdentityId">
            <summary>
            Returns the user id for whom executes a command or sets a state
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.ExecutedActivityState">
            <summary>
             Returns the name of the state  which is final for currently executing transition <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.To"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.CurrentActivityName">
            <summary>
            Returns the name of the current activity. Activity which was final for last executed transition <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.IdentityIds">
            <summary>
            Returns the list of user ids which have the ability to execute current transition. It availiable only on pre-execution mode
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.SchemeCode">
            <summary>
            Returns the code of the scheme of the process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.CurrentState">
            <summary>
            Returns the name of the current state. State which was final for last executed transition <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.StartTransitionalProcessActivity">
            <summary>
            Returns the name of the activity from which the transitional process was started.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.CurrentActivity">
            <summary>
            Returns the name of the current activity. Activity which was final for last executed transition <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.IsPreExecution">
            <summary>
            Returns true within pre-execution mode 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.ProcessScheme">
            <summary>
            Returns parsed scheme of the process <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.IsSchemeObsolete">
            <summary>
            Sign that the scheme of the process is obsolete
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.IsSubprocess">
            <summary>
            Returns true if the pcocess is subprocess
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.IsDeterminingParametersChanged">
            <summary>
            Sign that parameters for creating scheme of the process was changed
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.ProcessParameters">
            <summary>
            Returns the list of process parameters <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue"/>
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.SchemeDefinition`1">
            <summary>
            Represent a not parsed process scheme
            </summary>
            <typeparam name="T">Type of not parsed scheme</typeparam>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.SchemeDefinition`1.#ctor(System.Guid,System.Nullable{System.Guid},System.String,System.String,`0,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Create SchemeDefinition object
            </summary>
            <param name="id">Id of the the scheme</param>
            <param name="schemeCode">Name of the the scheme</param>
            <param name="parentSchemeCode">Name of the parent scheme if subprocess</param>
            <param name="rootSchemeCode">Name of the root scheme if subprocess</param>
            <param name="scheme">Not parsed process scheme</param>
            <param name="isObsolete">Sign that the scheme is obsolete</param>
            <param name="isDeterminingParametersChanged">Sign that parameters for creating scheme was changed</param>
            <param name="definingParameters">Parameters for creating the scheme of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.SchemeDefinition`1.#ctor(OptimaJet.Workflow.Core.Model.ProcessDefinition,OptimaJet.Workflow.Core.Parser.IWorkflowParser{`0})">
            <summary>
            Create SchemeDefinition object
            </summary>
            <param name="processDefinition">ProcessDefinition object</param>
            <param name="parser">WorkflowParser to serialize the scheme</param>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.SchemeDefinition`1.Scheme">
            <summary>
            Not parsed process scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.SchemeDefinition`1.SchemeCode">
            <summary>
            Name of the the scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.SchemeDefinition`1.RootSchemeCode">
            <summary>
            Name of the root scheme if subprocess
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.SchemeDefinition`1.Id">
            <summary>
            Id of the the scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.SchemeDefinition`1.RootSchemeId">
            <summary>
            Id of the the root scheme if subprocess
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.SchemeDefinition`1.IsObsolete">
            <summary>
            Sign that the scheme is obsolete
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.SchemeDefinition`1.IsDeterminingParametersChanged">
            <summary>
            Sign that parameters for creating scheme was changed
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.SchemeDefinition`1.DefiningParameters">
            <summary>
            Parameters for creating the scheme of the process
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.TimerDefinition">
            <summary>
            Represent a timer in a process scheme
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.TimerDefinition.Create(System.String,System.String,System.String,System.String)">
            <summary>
            Create TimerDefinition object
            </summary>
            <param name="name">Name of the timer</param>
            <param name="type">Type of the timer <see cref="T:OptimaJet.Workflow.Core.Model.TimerType"/></param>
            <param name="value">Specifies the timer time depend on timer type </param>
            <param name="notOverrideIfExists">If true specifies that the old timer time will not be overriden if a timer with same name exists in outgoing transitions of a new current activity</param>
            <returns>TimerDefinition object</returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TimerDefinition.Type">
            <summary>
            Type of the timer <see cref="T:OptimaJet.Workflow.Core.Model.TimerType"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TimerDefinition.Value">
            <summary>
            Specifies the timer time depend on timer type 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TimerDefinition.NotOverrideIfExists">
             <summary>
            If true specifies that the old timer time will not be overriden if a timer with same name exists in outgoing transitions of a new current activity
             </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.TimerType">
            <summary>
            Type of a timer
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TimerType.Interval">
            <summary>
            Timer time is set by interval in milliseconds
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TimerType.Time">
            <summary>
            Timer time is set to specific time of today or tomorrow
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TimerType.Date">
            <summary>
            Timer time is set to specific date at 00:00:00
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TimerType.DateAndTime">
            <summary>
            Timer time is set to specific date and time
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.TransitionClassifier">
            <summary>
            Classifier of  the direction of the transition
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TransitionClassifier.NotSpecified">
            <summary>
            Direction not specifiet
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TransitionClassifier.Direct">
            <summary>
            Direct transition
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TransitionClassifier.Reverse">
            <summary>
            Reverse transition
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ConcatenationType">
            <summary>
            Conditions and restrictions concatenation type
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ConcatenationType.And">
            <summary>
            Concatenate as And
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ConcatenationType.Or">
            <summary>
            Concatenate as Or
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.TransitionDefinition">
            <summary>
             Represent a transition in a process scheme
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.TransitionDefinition.Create(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,OptimaJet.Workflow.Core.Model.ActivityDefinition,OptimaJet.Workflow.Core.Model.ActivityDefinition,OptimaJet.Workflow.Core.Model.TriggerDefinition,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ConditionDefinition})">
            <summary>
            Create TransitionDefinition object
            </summary>
            <param name="name">Name of the transition</param>
            <param name="clasifier">Classifier of the direction of the transition</param>
            <param name="allowRestrictionsConcatenationType">Type of concatenation for restrictions with the type equal "Allow" <see cref="F:OptimaJet.Workflow.Core.Model.RestrictionType.Allow"/> <seealso cref="P:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Type"/></param>
            <param name="denyRestrictionsConcatenationType">Type of concatenation for restrictions with the type equal "Restrict" <see cref="F:OptimaJet.Workflow.Core.Model.RestrictionType.Restrict"/> <seealso cref="P:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Type"/></param>
            <param name="conditionsConcatenationType">Type of concatenation for conditions</param>
            <param name="mergeViaSetState">Returns true if after a subprocess will be merged with a parent process new state of a parent process will be set forcibly</param>
            <param name="disableParentStateControl"> Applied if transition is fork. False - mean that subprocess will be dropped if parent process turned up in a state where subprocess can not exist.
            True - mean that subprocess control is responsibility of a developer.</param>
            <param name="from">Source activity</param>
            <param name="to">Destination activity</param>
            <param name="trigger">Transition's trigger</param>
            <param name="conditions">List of conditions which are checked to execute transition</param>
            <param name="isFork">True if Transition initialized or finalized a fork (split, parallel branch). Fork transition is the initial or final transition of a subprocess</param>
            <returns>TransitionDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.TransitionDefinition.Create(OptimaJet.Workflow.Core.Model.ActivityDefinition,OptimaJet.Workflow.Core.Model.ActivityDefinition)">
            <summary>
            Create TransitionDefinition object with NotSpecified classifier, Always condition, Auto trigger
            </summary>
            <param name="from">Source activity</param>
            <param name="to">Destination activity</param>
            <returns>TransitionDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.TransitionDefinition.AddRestriction(OptimaJet.Workflow.Core.Model.RestrictionDefinition)">
            <summary>
            Add restriction to restrictions list
            </summary>
            <param name="restriction">RestrictionDefinition object</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.TransitionDefinition.Clone(System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ActorDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.CommandDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ActivityDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TimerDefinition})">
            <summary>
            Clones TransitionDefinition object replacing references to the references to the specific objects
            </summary>
            <param name="actorDefinitions">List of the actors to replace</param>
            <param name="commandDefinitions">List of the commands to replace</param>
            <param name="activityDefinitions">List of the activities to replace</param>
            <param name="timerDefinitions">List of the timers to replace</param>
            <returns>Cloned TransitionDefinition object</returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From">
            <summary>
            Source activity
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.To">
            <summary>
            Destination activity
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.Classifier">
            <summary>
            Classifier of the direction of the transition
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.Trigger">
            <summary>
            Transition's trigger
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.Conditions">
            <summary>
            List of conditions which are checked to execute transition
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.Restrictions">
            <summary>
            List of actors which are determine a user which can execute transition
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.AllowConcatenationType">
            <summary>
            Type of concatenation for restrictions with the type equal "Allow" <see cref="F:OptimaJet.Workflow.Core.Model.RestrictionType.Allow"/> <seealso cref="P:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Type"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.RestrictConcatenationType">
            <summary>
            Type of concatenation for restrictions with the type equal "Restrict" <see cref="F:OptimaJet.Workflow.Core.Model.RestrictionType.Restrict"/> <seealso cref="P:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Type"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.ConditionsConcatenationType">
            <summary>
            Type of concatenation for conditions
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.IsAlwaysTransition">
            <summary>
            Returns true if condition type of the transition is equal "Always" <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Always"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.IsOtherwiseTransition">
            <summary>
            Returns true if condition type of the transition is equal "Otherwise" <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Otherwise"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.IsConditionTransition">
            <summary>
            Returns true if condition type of the transition is equal "Action" <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Action"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.IsFork">
            <summary>
            Returns true if Transition initialized or finalized a fork (split, parallel branch). Fork transition is the initial or final transition of a subprocess
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.MergeViaSetState">
            <summary>
            Returns true if after a subprocess will be merged with a parent process new state of a parent process will be set forcibly
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.DisableParentStateControl">
            <summary>
            Applied if transition is fork. False - mean that subprocess will be dropped if parent process turned up in a state where subprocess can not exist.
            True - mean that subprocess control is responsibility of a developer.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.ForkType">
            <summary>
            Returns type of fork transition <see cref="T:OptimaJet.Workflow.Core.Model.TransitionForkType"/>
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.RestrictionDefinition">
            <summary>
            Represent a transition's restiction in a process scheme
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Create(System.String,OptimaJet.Workflow.Core.Model.ActorDefinition)">
            <summary>
            Create RestrictionDefinition object
            </summary>
            <param name="type">Type of the condition <see cref="T:OptimaJet.Workflow.Core.Model.ConditionType"/></param>
            <param name="actor"> Actor which allowed or restricted to trigger a transition</param>
            <returns>RestrictionDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Create(OptimaJet.Workflow.Core.Model.RestrictionType,OptimaJet.Workflow.Core.Model.ActorDefinition)">
            <summary>
            Create RestrictionDefinition object
            </summary>
            <param name="type">Type of the condition <see cref="T:OptimaJet.Workflow.Core.Model.ConditionType"/></param>
            <param name="actor"> Actor which allowed or restricted to trigger a transition</param>
            <returns>RestrictionDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Clone(System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ActorDefinition})">
            <summary>
            Clones RestrictionDefinition object replacing references to the references to the specific objects
            </summary>
            <param name="actorDefinitions">List of the actors to replace</param>
            <returns>Cloned RestrictionDefinition object</returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Type">
            <summary>
            Type of the restriction <see cref="T:OptimaJet.Workflow.Core.Model.RestrictionType"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Actor">
            <summary>
            Actor which allowed or restricted to trigger a transition
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.RestrictionType">
            <summary>
            Type of transition's restriction
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.RestrictionType.Allow">
            <summary>
            Transition is allowed to specific actor
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.RestrictionType.Restrict">
            <summary>
            Transition is restricted to specific actor
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.TransitionForkType">
            <summary>
            Type of transition in terms of subprocesses 
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TransitionForkType.NotFork">
            <summary>
            Not fork transition
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TransitionForkType.ForkStart">
            <summary>
            Transition which start a subprocess
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TransitionForkType.ForkEnd">
            <summary>
            Transition which end a subprocess
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TransitionForkType.ForkUnknown">
            <summary>
            Fork transition with unknown status in case of process definition is not marked
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.StartingTransitionNotFoundEventArgs">
            <summary>
            Represent information about case when we try to update a subprocess's scheme but there are no starting transition in a new sccheme of a root process
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.StartingTransitionNotFoundEventArgs.DropProcess">
            <summary>
            User decide to drop the subprocess
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.StartingTransitionNotFoundEventArgs.Ignore">
            <summary>
            User decide to ignore update of the scheme of the subprocess
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.StartingTransitionNotFoundEventArgs.StartWithNewTransition(System.String)">
            <summary>
            User decide to create the new scheme of the process starting from new transition
            </summary>
            <param name="transitionName"></param>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.StartingTransitionNotFoundEventArgs.ProcessId">
            <summary>
            Id of the process which scheme is impossible to update
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.StartingTransitionNotFoundEventArgs.RootProcessId">
            <summary>
            Id of the root process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.StartingTransitionNotFoundEventArgs.OldRootScheme">
            <summary>
            The old scheme of the root process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.StartingTransitionNotFoundEventArgs.NewRootScheme">
            <summary>
            The new scheme of the root process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.StartingTransitionNotFoundEventArgs.NewTransitionName">
            <summary>
            New starting transition name
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.StartingTransitionNotFoundEventArgs.OldTransitionName">
            <summary>
            Old staring transition name
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.WorkflowErrorEventArgs">
            <summary>
            Represent information about an error occurred due to execution of a workflow process
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowErrorEventArgs.#ctor(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Persistence.ProcessStatus,OptimaJet.Workflow.Core.Model.TransitionDefinition,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="processInstance">Instance of the process the execution of which caused the error</param>
            <param name="processStatus">Status of the process</param>
            <param name="executedTransition">Transition the execution of which caused the error</param>
            <param name="exception">Exception which was thrown</param>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowErrorEventArgs.Exception">
            <summary>
            Returns the exception which was thrown
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowErrorEventArgs.ProcessInstance">
            <summary>
            Returns the instance of the process the execution of which caused the error
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowErrorEventArgs.ProcessStatus">
            <summary>
            Status of the process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowErrorEventArgs.ExecutedTransition">
            <summary>
            Returns the transition the execution of which caused the error
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Subprocess.SubprocessUtils">
            <summary>
            Algorithms for subprocesses branches
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Subprocess.SubprocessUtils.MarkupSubprocesses(OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            Markups scheme, sets nesting level for each Activity
            </summary>
            <param name="processDefinition"></param>
            <returns>Process definition with marked nesting levels an subprocesses ids</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Parser.IWorkflowParser`1">
            <summary>
            Interface of a workflow parser, which parses not parsed process scheme <see cref="T:OptimaJet.Workflow.Core.Model.SchemeDefinition`1"/> to the object model of a scheme of a process <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/>
            </summary>
            <typeparam name="TSchemeMedium">Type of not parsed scheme</typeparam>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.IWorkflowParser`1.Parse(`0)">
            <summary>
            Returns object model of the scheme of a process
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.IWorkflowParser`1.Parse(System.String)">
            <summary>
            Returns object model of the scheme of a process
            </summary>
            <param name="scheme">String representation of not parsed scheme</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.IWorkflowParser`1.SerializeToSchemeMedium(OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            Serializes object model of the scheme to not parsed scheme
            </summary>
            <param name="processDefinition">ProcessDefinition object</param>
            <returns>Not parsed scheme</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.IWorkflowParser`1.SerializeToString(OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            Serializes object model of the scheme to string
            </summary>
            <param name="processDefinition">ProcessDefinition object</param>
            <returns>String representation of not parsed scheme</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Parser.WorkflowParser`1">
            <summary>
            Base workflow parser, which parses not parsed process scheme <see cref="T:OptimaJet.Workflow.Core.Model.SchemeDefinition`1"/> to the object model of a scheme of a process <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/>
            </summary>
            <typeparam name="TSchemeMedium">Type of not parsed scheme</typeparam>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.ParseTimers(`0)">
            <summary>
            Parses timers from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.TimerDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.ParseActors(`0)">
            <summary>
            Parses actors from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.ActorDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.ParseLocalization(`0)">
            <summary>
            Parses localization items from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.LocalizeDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.ParseParameters(`0)">
            <summary>
            Parses parameters from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.ParseCommands(`0,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ParameterDefinition})">
            <summary>
            Parses commands from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <param name="parameterDefinitions">List of parsed parameters <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinition"/></param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.CommandDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.ParseActivities(`0)">
            <summary>
            Parses activities from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.ActivityDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.ParseCodeActions(`0)">
            <summary>
            Parses code actions from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.CodeActionDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.ParseTransitions(`0,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ActorDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.CommandDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ActivityDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TimerDefinition})">
            <summary>
            Parses transitions from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <param name="actorDefinitions">List of parsed actors <see cref="T:OptimaJet.Workflow.Core.Model.ActorDefinition"/></param>
            <param name="commandDefinitions">List of parsed commands <see cref="T:OptimaJet.Workflow.Core.Model.CommandDefinition"/></param>
            <param name="activityDefinitions">List of parsed activities <see cref="T:OptimaJet.Workflow.Core.Model.ActivityDefinition"/></param>
            <param name="timerDefinitions">List of parsed timers <see cref="T:OptimaJet.Workflow.Core.Model.TimerDefinition"/></param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.TransitionDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.GetSchemeCode(`0)">
            <summary>
            Gets the code of the scheme from not parsed scheme 
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>Code of the scheme</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.GetDesignerSettings(`0)">
            <summary>
            Gets designer settings from not parsed scheme 
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>Designer settings</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.Parse(System.String)">
            <summary>
            Returns object model of the scheme of a process
            </summary>
            <param name="scheme">String representation of not parsed sheme</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.SerializeToSchemeMedium(OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            Serializes object model of the scheme to not parsed scheme
            </summary>
            <param name="processDefinition">ProcessDefinition object</param>
            <returns>Not parsed scheme</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.SerializeToString(OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            Serializes object model of the scheme to string
            </summary>
            <param name="processDefinition">ProcessDefinition object</param>
            <returns>String representation of not parsed scheme</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.Parse(`0)">
            <summary>
            Returns object model of the scheme of a process
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser">
            <summary>
            Base workflow parser, which parses not parsed process scheme serialized to XML to the object model of a scheme of a process <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.ParseTimers(System.Xml.Linq.XElement)">
            <summary>
            Parses timers from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.TimerDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.ParseActors(System.Xml.Linq.XElement)">
            <summary>
            Parses actors from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.ActorDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.ParseLocalization(System.Xml.Linq.XElement)">
            <summary>
            Parses localization items from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.LocalizeDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.ParseParameters(System.Xml.Linq.XElement)">
            <summary>
            Parses parameters from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.ParseCommands(System.Xml.Linq.XElement,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ParameterDefinition})">
            <summary>
            Parses commands from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <param name="parameterDefinitions">List of parsed parameters <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinition"/></param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.CommandDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.ParseActivities(System.Xml.Linq.XElement)">
            <summary>
            Parses activities from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.ActivityDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.ParseCodeActions(System.Xml.Linq.XElement)">
            <summary>
            Parses code actions from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.CodeActionDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.ParseTransitions(System.Xml.Linq.XElement,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ActorDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.CommandDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ActivityDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TimerDefinition})">
            <summary>
            Parses transitions from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <param name="actorDefinitions">List of parsed actors <see cref="T:OptimaJet.Workflow.Core.Model.ActorDefinition"/></param>
            <param name="commandDefinitions">List of parsed commands <see cref="T:OptimaJet.Workflow.Core.Model.CommandDefinition"/></param>
            <param name="activityDefinitions">List of parsed activities <see cref="T:OptimaJet.Workflow.Core.Model.ActivityDefinition"/></param>
            <param name="timerDefinitions">List of parsed timers <see cref="T:OptimaJet.Workflow.Core.Model.TimerDefinition"/></param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.TransitionDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.GetSchemeCode(System.Xml.Linq.XElement)">
            <summary>
            Gets the code of the scheme from not parsed scheme 
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>Code of the scheme</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.GetDesignerSettings(System.Xml.Linq.XElement)">
            <summary>
            Gets designer settings from not parsed scheme 
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>Designer settings</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.Parse(System.String)">
            <summary>
            Returns object model of the scheme of a process
            </summary>
            <param name="scheme">String representation of not parsed sheme</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Persistence.IRuntimePersistence">
            <summary>
            Provides save and load of workflow runtime parameters. as timers etc
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Persistence.ProcessStatus">
            <summary>
            Represent a stage of a life cycle of a process
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.NotFound">
            <summary>
            Status of a processes which are not exists in persistence store
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Unknown">
            <summary>
            Status of a processes which are exists in persistence store but theirs status is not defined
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Initialized">
            <summary>
            Status of a processes which was created just now 
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Running">
            <summary>
            Status of a processes which are executing at current moment
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Idled">
            <summary>
            Status of a processes which are not executing at current moment and awaiting an external interaction
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Finalized">
            <summary>
            Status of a processes which was finalized
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Terminated">
            <summary>
            Status of a processes which was terminated with an error
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Error">
            <summary>
            Status of a processes which had an error but not terminated
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider">
            <summary>
            Interface of a persistence provider, which provide storing of process's instance specific parameters and global parameters
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.Init(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Init the provider
            </summary>
            <param name="runtime">Workflow runtime instance which owned the provider</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.InitializeProcess(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Initialize a process instance in persistence store
            </summary>
            <param name="processInstance">Instance of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.FillProcessParameters(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Fills system <see cref="F:OptimaJet.Workflow.Core.Model.ParameterPurpose.System"/>  and persisted <see cref="F:OptimaJet.Workflow.Core.Model.ParameterPurpose.Persistence"/> parameters of the process
            </summary>
            <param name="processInstance">Instance of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.FillPersistedProcessParameters(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Fills persisted <see cref="F:OptimaJet.Workflow.Core.Model.ParameterPurpose.Persistence"/> parameters of the process
            </summary>
            <param name="processInstance">Instance of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.FillSystemProcessParameters(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Fills system <see cref="F:OptimaJet.Workflow.Core.Model.ParameterPurpose.System"/> parameters of the process
            </summary>
            <param name="processInstance">Instance of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.SavePersistenceParameters(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Saves persisted <see cref="F:OptimaJet.Workflow.Core.Model.ParameterPurpose.Persistence"/> parameters of the process to store
            </summary>
            <param name="processInstance">Instance of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.SetWorkflowIniialized(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Set process instance status to <see cref="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Initialized"/>
            </summary>
            <param name="processInstance">Instance of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.SetWorkflowIdled(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Set process instance status to <see cref="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Idled"/>
            </summary>
            <param name="processInstance">Instance of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.SetWorkflowRunning(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Set process instance status to <see cref="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Running"/>
            </summary>
            <param name="processInstance">Instance of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.SetWorkflowFinalized(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Set process instance status to <see cref="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Finalized"/>
            </summary>
            <param name="processInstance">Instance of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.SetWorkflowTerminated(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Persistence.ErrorLevel,System.String)">
            <summary>
            Set process instance status to <see cref="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Terminated"/>
            </summary>
            <param name="processInstance">Instance of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.ResetWorkflowRunning">
            <summary>
            Resets all process to <see cref="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Idled"/> status
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.UpdatePersistenceState(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Model.TransitionDefinition)">
            <summary>
            Updates system parameters of the process in the store
            </summary>
            <param name="processInstance">Instance of the process</param>
            <param name="transition">Last executed transition</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.IsProcessExists(System.Guid)">
            <summary>
            Checks existence of the process
            </summary>
            <param name="processId">Id of the process</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.GetInstanceStatus(System.Guid)">
            <summary>
            Returns status of the process <see cref="T:OptimaJet.Workflow.Core.Persistence.ProcessStatus"/>
            </summary>
            <param name="processId">Id of the process</param>
            <returns>Status of the process</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.BindProcessToNewScheme(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Saves information about changed scheme to the store
            </summary>
            <param name="processInstance">Instance of the process whith changed scheme <see cref="P:OptimaJet.Workflow.Core.Model.ProcessInstance.ProcessScheme"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.BindProcessToNewScheme(OptimaJet.Workflow.Core.Model.ProcessInstance,System.Boolean)">
            <summary>
            Saves information about changed scheme to the store
            </summary>
            <param name="processInstance">Instance of the process whith changed scheme <see cref="P:OptimaJet.Workflow.Core.Model.ProcessInstance.ProcessScheme"/></param>
            <param name="resetIsDeterminingParametersChanged">True if required to reset IsDeterminingParametersChanged flag <see cref="P:OptimaJet.Workflow.Core.Model.ProcessInstance.IsDeterminingParametersChanged"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.RegisterTimer(System.Guid,System.String,System.DateTime,System.Boolean)">
            <summary>
            Register a new timer
            </summary>
            <param name="processId">Id of the process</param>
            <param name="name">Timer name <see cref="!:TimerDefinition.Name"/></param>
            <param name="nextExecutionDateTime">Next date and time of timer's execution</param>
            <param name="notOverrideIfExists">If true specifies that the existing timer with same name will not be overriden <see cref="P:OptimaJet.Workflow.Core.Model.TimerDefinition.NotOverrideIfExists"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.ClearTimers(System.Guid,System.Collections.Generic.List{System.String})">
            <summary>
            Removes all timers from the store, exlude listed in ignore list
            </summary>
            <param name="processId">Id of the process</param>
            <param name="timersIgnoreList">Ignore list</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.ClearTimersIgnore">
            <summary>
            Clears sign Ignore for all timers
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.ClearTimer(System.Guid)">
            <summary>
            Remove specific timer
            </summary>
            <param name="timerId">Id of the timer</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.GetCloseExecutionDateTime">
            <summary>
            Get closest execution date and time for all timers
            </summary>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.GetTimersToExecute">
            <summary>
            Get all timers which must be executed at this moment of time
            </summary>
            <returns>List of timers to execute</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.DeleteProcess(System.Guid)">
            <summary>
            Remove all information about the process from the store
            </summary>
            <param name="processId">Id of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.DeleteProcess(System.Guid[])">
            <summary>
            Remove all information about the process from the store
            </summary>
            <param name="processIds">List of ids of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.SaveGlobalParameter``1(System.String,System.String,``0)">
            <summary>
            Saves a global parameter value
            </summary>
            <typeparam name="T">System type of the parameter</typeparam>
            <param name="type">Logical type of the parameter</param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.LoadGlobalParameter``1(System.String,System.String)">
            <summary>
            Returns a global parameter value
            </summary>
            <typeparam name="T">System type of the parameter</typeparam>
            <param name="type">Logical type of the parameter</param>
            <param name="name">Name of the parameter</param>
            <returns>Value of the parameter</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.LoadGlobalParameters``1(System.String)">
            <summary>
            Returns a global parameter value
            </summary>
            <typeparam name="T">System type of the parameter</typeparam>
            <param name="type">Logical type of the parameter</param>
            <returns>List of the values of the parameters</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.DeleteGlobalParameters(System.String,System.String)">
            <summary>
            Deletes a global parameter
            </summary>
            <param name="type">Logical type of the parameter</param>
            <param name="name">Name of the parameter</param>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1">
            <summary>
            Interface of a persistence provider, which provide storing of schemes
            </summary>
            <typeparam name="TSchemeMedium">Type of not parsed scheme</typeparam>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.GetProcessSchemeByProcessId(System.Guid)">
            <summary>
            Gets not parsed scheme of the process by process id
            </summary>
            <param name="processId">Id of the process</param>
            <returns>Not parsed scheme of the process</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.GetProcessSchemeBySchemeId(System.Guid)">
            <summary>
            Gets not parsed scheme by id
            </summary>
            <param name="schemeId">Id of the scheme</param>
            <returns>Not parsed scheme of the process</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.GetProcessSchemeWithParameters(System.String,System.String,System.Nullable{System.Guid},System.Boolean)">
            <summary>
            Gets not parsed scheme by scheme name and parameters    
            </summary>
            <param name="schemeCode">Name of the scheme</param>
            <param name="parameters">Parameters for creating the scheme</param>
            <param name="rootSchemeId">Id of the root scheme in case of subprocess</param>
            <param name="ignoreObsolete">True if you need to ignore obsolete schemes</param>
            <returns>Not parsed scheme of the process</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.GetScheme(System.String)">
            <summary>
            Gets not parsed scheme by scheme name  
            </summary>
            <param name="code">Name of the scheme</param>
            <returns>Not parsed scheme of the process</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.SaveScheme(OptimaJet.Workflow.Core.Model.SchemeDefinition{`0})">
            <summary>
            Saves scheme to a store
            </summary>
            <param name="scheme">Not parsed scheme of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.SetSchemeIsObsolete(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets sign IsObsolete to the scheme
            </summary>
            <param name="schemeCode">Name of the scheme</param>
            <param name="parameters">Parameters for creating the scheme</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.SetSchemeIsObsolete(System.String)">
            <summary>
            Sets sign IsObsolete to the scheme
            </summary>
            <param name="schemeCode">Name of the scheme</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.SaveScheme(System.String,System.String)">
            <summary>
            Saves scheme to a store
            </summary>
            <param name="schemeCode">Name of the scheme</param>
            <param name="scheme">Not parsed scheme</param>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.EmptyWorkflowActionProvider">
            <summary>
            Empty action provider for system purpose
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider">
            <summary>
            Interface of a action provider, which provide execution of actions specified in activities <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.Implementation"/> and <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.PreExecutionImplementation"/>
            and execution of conditions <see cref="P:OptimaJet.Workflow.Core.Model.ConditionDefinition.Action"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider.ExecuteAction(System.String,OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String)">
            <summary>
            Execute action
            </summary>
            <param name="name">Name of the action to execute</param>
            <param name="processInstance">Reference to ProcessInstance from which action is executed <see cref="T:OptimaJet.Workflow.Core.Model.ProcessInstance"/></param>
            <param name="runtime">Reference to WorkflowRuntime object which managed specified process instance <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime"/></param>
            <param name="actionParameter">Additional action parameter <see cref="P:OptimaJet.Workflow.Core.Model.ActionDefinitionReference.ActionParameter"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider.ExecuteCondition(System.String,OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String)">
            <summary>
            Check condition
            </summary>
            <param name="name">Name of the condition to check</param>
            <param name="processInstance">Reference to ProcessInstance from which condition is checked <see cref="T:OptimaJet.Workflow.Core.Model.ProcessInstance"/></param>
            <param name="runtime">Reference to WorkflowRuntime object which managed specified process instance <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime"/></param>
            <param name="actionParameter">Additional action parameter <see cref="P:OptimaJet.Workflow.Core.Model.ActionDefinitionReference.ActionParameter"/></param>
            <returns>Condition result</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider.GetActions">
            <summary>
            Return all user conditions and actions names
            </summary>
            <returns>List of conditions and actions names</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.EmptyWorkflowRuleProvider">
            <summary>
            Empty rule provider for system purpose
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider">
            <summary>
            Interface of a rule provider, which provide rule checking and getting of a list of users which satisfies a rule <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.Restrictions"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider.GetRules">
            <summary>
            Return all rule names
            </summary>
            <returns>List of rule names</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider.Check(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String,System.String,System.String)">
            <summary>
            Check the rule
            </summary>
            <param name="processId">Process id from which rule is checking</param>
            <param name="identityId">User id for which rule is checking </param>
            <param name="ruleName">Name of the rule to check</param>
            <param name="parameter">Additional rule parameter <see cref="P:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Actor"/> <see cref="P:OptimaJet.Workflow.Core.Model.ActorDefinition.Value"/></param>
            <returns>Rule check result</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider.GetIdentities(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String,System.String)">
            <summary>
            Get the list of users which satisfies the rule
            </summary>
            <param name="processId">Process id from which rule is checking</param>
            <param name="ruleName">Name of the rule to get users list</param>
            <param name="parameter">Additional rule parameter <see cref="P:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Actor"/> <see cref="P:OptimaJet.Workflow.Core.Model.ActorDefinition.Value"/></param>
            <returns>List of users which satisfies the rule</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.ITimerManager">
            <summary>
            Interface of a timer manager, which control timers functioning inside a workflow runtime
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ITimerManager.RegisterTimers(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Register all timers for all outgouing timer transitions for current actvity of the specified process.
            All timers registered before which are present in transitions will be rewrited except timers marked as NotOverrideIfExists <see cref="T:OptimaJet.Workflow.Core.Model.TimerDefinition"/>
            </summary>
            <param name="processInstance">Process instance whose timers need to be registered</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ITimerManager.ClearAndRegisterTimers(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Clear timers <see cref="M:OptimaJet.Workflow.Core.Runtime.ITimerManager.ClearTimers(OptimaJet.Workflow.Core.Model.ProcessInstance)"/> and then register new timers <see cref="M:OptimaJet.Workflow.Core.Runtime.ITimerManager.RegisterTimers(OptimaJet.Workflow.Core.Model.ProcessInstance)"/>
            </summary>
            <param name="processInstance">Process instance whose timers need to be cleared an registered</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ITimerManager.ClearTimers(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Clear all registerd timers except present in outgouing timer transitions for current actvity of the specified process and marked as NotOverrideIfExists <see cref="T:OptimaJet.Workflow.Core.Model.TimerDefinition"/>
            </summary>
            <param name="processInstance">Process instance whose timers need to be cleared</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ITimerManager.Start">
            <summary>
            Start the timer
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ITimerManager.Stop">
            <summary>
            Stop the timer
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ITimerManager.Refresh">
            <summary>
            Refresh interval of the timer
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.NeedDeterminingParametersEventArgs">
            <summary>
            Event args for request parameters for creating a process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.NeedDeterminingParametersEventArgs.ProcessId">
            <summary>
            Process id 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.NeedDeterminingParametersEventArgs.DeterminingParameters">
            <summary>
            List of parameters for creating the process
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.ProcessStatusChangedEventArgs">
            <summary>
            Represent information about changed status of a process 
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ProcessStatusChangedEventArgs.#ctor(System.Guid,System.Boolean,OptimaJet.Workflow.Core.Persistence.ProcessStatus,OptimaJet.Workflow.Core.Persistence.ProcessStatus)">
            <summary>
            Constructor
            </summary>
            <param name="processId">Id of the process whose status was changed</param>
            <param name="oldStatus">Previous status of the process</param>
            <param name="newStatus">Actual status of the process</param>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessStatusChangedEventArgs.ProcessId">
            <summary>
            Id of the process whose status was changed
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessStatusChangedEventArgs.IsSubprocess">
            <summary>
            If true means that the status was changed for subprocess
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessStatusChangedEventArgs.OldStatus">
            <summary>
            Previous status of the process <see cref="T:OptimaJet.Workflow.Core.Persistence.ProcessStatus"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessStatusChangedEventArgs.NewStatus">
            <summary>
            Actual status of the process <see cref="T:OptimaJet.Workflow.Core.Persistence.ProcessStatus"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessStatusChangedEventArgs.SchemeCode">
            <summary>
            Code of the scheme of the process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessStatusChangedEventArgs.ProcessInstance">
            <summary>
            Instance of the process
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.SchemaWasChangedEventArgs">
            <summary>
            Represent information about changed scheme of a process 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.SchemaWasChangedEventArgs.ProcessId">
            <summary>
            Id of the process whose scheme was changed
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.SchemaWasChangedEventArgs.SchemeId">
            <summary>
            Actual scheme id
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.SchemaWasChangedEventArgs.SchemaWasObsolete">
            <summary>
            True if the scheme of the process was change due to scheme was obsolete
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.SchemaWasChangedEventArgs.DeterminingParametersWasChanged">
            <summary>
            True if the scheme of the procee was changed due to process creating parameters was changed
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.TimerToExecute">
            <summary>
            Represent a timer information
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.TimerToExecute.TimerId">
            <summary>
            Timer id
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.TimerToExecute.Name">
            <summary>
            Timer name <see cref="!:TimerDefinition.Name"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.TimerToExecute.ProcessId">
            <summary>
            Id of the process which owned the timer
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.TimerManager">
            <summary>
            Default timer manager <see cref="T:OptimaJet.Workflow.Core.Runtime.ITimerManager"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.TimerManager.RegisterTimers(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Register all timers for all outgouing timer transitions for current actvity of the specified process.
            All timers registered before which are present in transitions will be rewrited except timers marked as NotOverrideIfExists <see cref="T:OptimaJet.Workflow.Core.Model.TimerDefinition"/>
            </summary>
            <param name="processInstance">Process instance whose timers need to be registered</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.TimerManager.ClearAndRegisterTimers(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Clear timers <see cref="M:OptimaJet.Workflow.Core.Runtime.TimerManager.ClearTimers(OptimaJet.Workflow.Core.Model.ProcessInstance)"/> and then register new timers <see cref="M:OptimaJet.Workflow.Core.Runtime.TimerManager.RegisterTimers(OptimaJet.Workflow.Core.Model.ProcessInstance)"/>
            </summary>
            <param name="processInstance">Process instance whose timers need to be cleared an registered</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.TimerManager.ClearTimers(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Clear all registerd timers except present in outgouing timer transitions for current actvity of the specified process and marked as NotOverrideIfExists <see cref="T:OptimaJet.Workflow.Core.Model.TimerDefinition"/>
            </summary>
            <param name="processInstance">Process instance whose timers need to be cleared</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.TimerManager.Start">
            <summary>
            Start the timer
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.TimerManager.Stop">
            <summary>
            Stop the timer
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.TimerManager.Refresh">
            <summary>
            Refresh interval of the timer
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.CommandParameter">
            <summary>
            Represent a command parameter for use in an application
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CommandParameter.ParameterName">
            <summary>
            System name of the parameter
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CommandParameter.LocalizedName">
            <summary>
            Localized name of the parameter
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CommandParameter.Value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CommandParameter.Type">
            <summary>
            Type of the parameter
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CommandParameter.TypeName">
            <summary>
            Full name of the type of the parameter
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand">
            <summary>
            Represents a workflow command for use in an application
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.Parameters">
            <summary>
            Parameters list of the command <see cref="T:OptimaJet.Workflow.Core.Runtime.CommandParameter"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.GetParameter(System.String)">
            <summary>
            Get the parameter value
            </summary>
            <param name="name">Parameter name</param>
            <returns>Parameter value</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.SetParameter(System.String,System.Object)">
            <summary>
            Set parameter value
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.Create(System.Guid,OptimaJet.Workflow.Core.Model.TransitionDefinition,OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            Create a workflow command object
            </summary>
            <param name="processId">Procees id</param>
            <param name="transitionDefinition">Command transition <see cref="T:OptimaJet.Workflow.Core.Model.TransitionDefinition"/></param>
            <param name="processDefinition"><see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/> object which represent parsed workflow scheme</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.AddIdentity(System.String)">
            <summary>
            Add an identity in Identities collection
            </summary>
            <param name="identityId"></param>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.ProcessId">
            <summary>
            Process id for which command is valid
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.ValidForActivityName">
            <summary>
            Activity name for which command is valid
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.ValidForSubprocess">
            <summary>
            If true mean that command is valid for a subprocess
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.ValidForStateName">
            <summary>
            Activity name for which command is valid
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.Classifier">
            <summary>
            Transition classifier for command  <see cref="T:OptimaJet.Workflow.Core.Model.TransitionClassifier"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.IsForSubprocess">
            <summary>
            If true means that the command was recieved from a subprocess
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.Identities">
            <summary>
            List of user ids which can execute the command
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.CommandName">
            <summary>
            System name of the command
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.LocalizedName">
            <summary>
            Localized name of the command
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime">
            <summary>
            Provides main API to operations with workflow processes
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.DeserializeParameter(System.String,System.Type)">
            <summary>
            Provides access to Workflow Engine .NET Persistence Process Parameters serialization mechanism
            </summary>
            <param name="serializedValue">Serialized value</param>
            <param name="parameterType">Parameter type</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SerializeParameter(System.Object,System.Type)">
            <summary>
            Provides access to Workflow Engine .NET Persistence Process Parameters deserialization mechanism
            </summary>
            <param name="value">Parameter value</param>
            <param name="parameterType">Parameter type</param>
            <returns>Serialized string</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.Start">
            <summary>
            Start all workflow runtime services аnd compile global code actions
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.ColdStart">
            <summary>
            Start all workflow runtime services except timers аnd compile global code actions
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CodeActionsRegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Register assembly in <see cref="T:OptimaJet.Workflow.Core.CodeActions.CodeActionsCompiller"/> as referenced assembly
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.RegisterLicense(System.String)">
            <summary>
            Register the license to remove license restrictions
            </summary>
            <param name="licenseText">License text</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.IsProcessExists(System.Guid)">
            <summary>
            Check existence of the specified process 
            </summary>
            <param name="processId">Process id</param>
            <returns>True if process with specified identifier is exists</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CreateInstance(System.String,System.Guid)">
            <summary>
            Create instance of process.
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="processId">Process id</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CreateInstance(System.String,System.Guid,System.String,System.String)">
            <summary>
            Create instance of process.
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="processId">Process id</param>
            <param name="identityId">The user id which execute initial command if command is available</param>
            <param name="impersonatedIdentityId">The user id for whom executes initial command if command is available</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CreateInstance(System.String,System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create instance of process.
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="processId">Process id</param>
            <param name="parameters">Parameters for creating the scheme of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CreateInstance(System.String,System.Guid,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create instance of the process.
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="processId">Process id</param>
            <param name="identityId">The user id which execute initial command if command is available</param>
            <param name="impersonatedIdentityId">The user id for whom executes initial command if command is available</param>
            <param name="parameters">The parameters for creating scheme of process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.DeleteInstance(System.Guid)">
            <summary>
            Delete instance of the process and all child subprocesses.
            </summary>
            <param name="processId">Process id</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessInstancesTree(System.Guid)">
            <summary>
            Returns process instance tree (root process and subprocesses)
            </summary>
            <param name="rootId">Root process id</param>
            <returns>ProcessInstancesTree object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessInstancesTree(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Returns process instance tree (root process and subprocesses)
            </summary>
            <param name="processInstance">ProcessInstance for which tree is builds</param>
            <returns>ProcessInstancesTree object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetSchemeIsObsolete(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Set flag IsObsolete for all schemas of process with specific code and parameters
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="parameters">The parameters for creating scheme of process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetSchemeIsObsolete(System.String)">
            <summary>
            Set flag IsObsolete for all schemas of process with specific code
            </summary>
            <param name="schemeCode">Code of the scheme</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.UpdateSchemeIfObsolete(System.Guid)">
            <summary>
            Updating scheme of specific process 
            </summary>
            <param name="processId">Process id</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.UpdateSchemeIfObsolete(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Updating scheme of specific process 
            </summary>
            <param name="processId">The process id</param>
            <param name="parameters">Parameters for creating scheme of process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.PreExecuteFromInitialActivity(System.Guid,System.Boolean)">
            <summary>
            Pre-execution from initial activity of the process
            </summary>
            <param name="processId">The process id</param>
            <param name="ignoreCurrentStateCheck">If false and Current State Name and State Name of Current Activity is different (in case of scheme upgrade) do not run pre-execution</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.PreExecuteFromCurrentActivity(System.Guid,System.Boolean)">
            <summary>
            Pre-execution from current activity of the process
            </summary>
            <param name="processId">The process id</param>
            <param name="ignoreCurrentStateCheck">If false and Current State Name and State Name of Current Activity is different (in case of scheme upgrade) do not run pre-execution</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.PreExecute(System.Guid,System.String,System.Boolean)">
            <summary>
            Pre-execution from specified activity of the process
            </summary>
            <param name="processId">Process id</param>
            <param name="fromActivityName">Activity name which begins pre-execution</param>
            <param name="ignoreCurrentStateCheck">If false and Current State Name and State Name of Current Activity is different (in case of scheme upgrade) do not run pre-execution</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetInitialCommands(System.String,System.String)">
            <summary>
            Return the list of commands which is availiable from initial activity for specified user
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="identityId">User id for whom formed initial commands list</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetInitialCommands(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Return the list of commands which is availiable from initial activity for specified users
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="identityIds">List of User ids for which formed initial commands list</param>
            <param name="processParameters">Parameters for creating scheme of process</param>
            <param name="commandNameFilter">Selects only the specified command if not null </param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableCommands(System.Guid,System.String)">
            <summary>
            Return the list of commands which is availiable from current activity for specified user
            </summary>
            <param name="processId">Process id</param>
            <param name="identityId">User id for whom formed initial commands list</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableCommands(System.Guid,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Return the list of commands which is availiable from current activity for specified user
            </summary>
            <param name="processId">Process id</param>
            <param name="identityIds">List of User ids for which formed initial commands list</param>
            <param name="commandNameFilter">Selects only the specified command if not null</param>
            <param name="mainIdentityId">User id for priority check of rules</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.ExecuteCommand(OptimaJet.Workflow.Core.Runtime.WorkflowCommand,System.String,System.String)">
            <summary>
            Execute specified command for specified users 
            </summary>
            <param name="command">Command to execute</param>
            <param name="identityId">The user id which execute command</param>
            <param name="impersonatedIdentityId">The user id for whom executes command (impersonation)</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.ExecuteCommand(System.Guid,System.String,System.String,OptimaJet.Workflow.Core.Runtime.WorkflowCommand)">
            <summary>
            Execute specified command for specified users 
            </summary>
            <param name="processId">Process id</param>
            <param name="identityId">The user id which execute command</param>
            <param name="impersonatedIdentityId">The user id for whom executes command (impersonation)</param>
            <param name="command">Command to execute</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetInitialState(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Return the initial state for process scheme
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="processParameters">Parameters for creating scheme of process</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetCurrentState(System.Guid)">
            <summary>
            Return the current state of specified process
            </summary>
            <param name="processId">Process id</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetCurrentStateName(System.Guid)">
            <summary>
            Return the current state name of specified process
            </summary>
            <param name="processId">Process id</param>
            <returns>Name of current state</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetCurrentActivityName(System.Guid)">
            <summary>
            Return the current activity name of specified process
            </summary>
            <param name="processId">Process id</param>
            <returns>Current activity name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableStateToSet(System.Guid)">
            <summary>
            Get the list of all states which available for set of specified process localized in current culture
            </summary>
            <param name="processId">Process id</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableStateToSet(System.Guid,System.Globalization.CultureInfo)">
            <summary>
            Get the list of all states which available for set of specified process localized in specified culture
            </summary>
            <param name="processId">Process id</param>
            <param name="culture">Culture to localize state names</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableStateToSet(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get the list of all states which available for set of specified scheme in current culture
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="parameters">The parameters for creating scheme of process</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableStateToSet(System.String,System.Globalization.CultureInfo,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get the list of all states which available for set of specified scheme in specified culture
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="culture">Culture to localize state names</param>
            <param name="parameters">The parameters for creating scheme of process</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetState(System.Guid,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Set specified state for specified process 
            </summary>
            <param name="processId">Process id</param>
            <param name="identityId">The user id which set the state</param>
            <param name="impersonatedIdentityId">The user id for whom sets the state (impersonation)</param>
            <param name="stateName">State name to set</param>
            <param name="parameters">Dictionary of ProcessInstance parameters which transferred to executed actions</param>
            <param name="preventExecution">Actions due to transition process do not executed if true</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetActivityWithoutExecution(OptimaJet.Workflow.Core.Model.ActivityDefinition,OptimaJet.Workflow.Core.Model.ProcessInstance,System.Boolean)">
            <summary>
            Set specified activity as current without execution of the implementation of the activity
            </summary>
            <param name="activityToSet">Activity to set</param>
            <param name="processInstance">Process instance for set activity as current</param>
            <param name="doNotSetRunningStatus">The status of the process - <see cref="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Running"/> will not be set if true</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetActivityWithExecution(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},OptimaJet.Workflow.Core.Model.ActivityDefinition,OptimaJet.Workflow.Core.Model.ProcessInstance,System.Boolean)">
            <summary>
            Set specified activity as current and executing the implementation of the activity
            </summary>
            <param name="identityId">The user id which set the activity</param>
            <param name="impersonatedIdentityId">The user id for whom sets the activity (impersonation)</param>
            <param name="parameters">Dictionary of ProcessInstance parameters which transferred to executed actions</param>
            <param name="activityToSet">Activity to set</param>
            <param name="processInstance">Process instance for set activity as current</param>
            <param name="doNotSetRunningStatus">The status of the process - <see cref="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Running"/> will not be set if true</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAllActorsForAllCommandTransitions(System.Guid,System.Boolean,System.String)">
            <summary>
            Get the list of user ids which can execute any command for specified process activity
            </summary>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAllActorsForDirectCommandTransitions(System.Guid,System.Boolean,System.String)">
            <summary>
            Get the list of user ids which can execute any command bound whith direct transitions (by transition classifier) for specified process activity
            </summary>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAllActorsForDirectAndUndefinedCommandTransitions(System.Guid,System.Boolean,System.String)">
            <summary>
            Get the list of user ids which can execute any command bound whith direct or undefined transitions (by transition classifier) for specified process activity
            </summary>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param> 
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAllActorsForReverseCommandTransitions(System.Guid,System.Boolean,System.String)">
            <summary>
            Get the list of user ids which can execute any command bound whith reverse transitions (by transition classifier) for specified process activity
            </summary>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAllActorsForCommandTransitions(System.Guid,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TransitionClassifier},System.Boolean,System.String)">
            <summary>
            Get the list of user ids which can execute any command bound whith a transitions selected by filter (by transition classifier) for specified process activity
            </summary>
            <param name="processId">Process id</param>
            <param name="classifiers">Filter for transitions by transition classifier</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessScheme(System.Guid)">
            <summary>
            Get procees definition (parsed scheme) for specified process
            </summary>
            <param name="processId">Process id</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/> object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetLocalizedStateNameBySchemeCode(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get localized state name for specified scheme in current culture
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="stateName">State name to localize</param>
            <param name="parameters">The parameters for creating scheme of process</param>
            <returns>Localized state name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessStatus(System.Guid)">
            <summary>
            Get status of specified process
            </summary>
            <param name="processId">Process id</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Persistence.ProcessStatus"/> object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetLocalizedStateNameBySchemeId(System.Guid,System.String)">
            <summary>
            Get localized state name for specified scheme in current culture
            </summary>
            <param name="schemeId">Id of the scheme</param>
            <param name="stateName">State name to localize</param>
            <returns>Localized state name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetLocalizedStateName(System.Guid,System.String)">
            <summary>
            Get localized state name for specified process in current culture
            </summary>
            <param name="processId">Process id</param>
            <param name="stateName">State name to localize</param>
            <returns>Localized state name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetLocalizedCommandName(System.Guid,System.String)">
            <summary>
            Get localized command name for specified process in current culture
            </summary>
            <param name="processId">Process id</param>
            <param name="commandName">Command name to localize</param>
            <returns>Localized command name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetLocalizedCommandNameBySchemeId(System.Guid,System.String)">
            <summary>
            Get localized command name for specified scheme in current culture
            </summary>
            <param name="schemeId">Id of the scheme</param>
            <param name="commandName">Command name to localize</param>
            <returns>Localized command name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessInstanceAndFillProcessParameters(System.Guid)">
            <summary>
            Get process instance with all parameters for specified process id
            </summary>
            <param name="processId">Process id</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Model.ProcessInstance"/> object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.IsProcessExistsAsync(System.Guid)">
            <summary>
            Check existence of the specified process 
            </summary>
            <param name="processId">Process id</param>
            <returns>True if process with specified identifier is exists</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CreateInstanceAsync(System.String,System.Guid)">
            <summary>
            Create instance of process (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="processId">Process id</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CreateInstanceAsync(System.String,System.Guid,System.String,System.String)">
            <summary>
            Create instance of process (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="processId">Process id</param>
            <param name="identityId">The user id which execute initial command if command is available</param>
            <param name="impersonatedIdentityId">The user id for whom executes initial command if command is available</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CreateInstanceAsync(System.String,System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create instance of process (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="processId">Process id</param>
            <param name="parameters">The parameters for creating scheme of process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CreateInstanceAsync(System.String,System.Guid,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create instance of process (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="processId">Process id</param>
            <param name="identityId">The user id which execute initial command if command is available</param>
            <param name="impersonatedIdentityId">The user id for whom executes initial command if command is available</param>
            <param name="parameters">The parameters for creating scheme of process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.DeleteInstanceAsync(System.Guid)">
            <summary>
            Delete instance of the process and all child subprocesses.  (async version)
            </summary>
            <param name="processId">Process id</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetSchemeIsObsoleteAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Set flag IsObsolete for all schemas of process with specific code and parameters (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="parameters">The parameters for creating scheme of process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetSchemeIsObsoleteAsync(System.String)">
            <summary>
            Set flag IsObsolete for all schemas of process with specific code (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.UpdateSchemeIfObsoleteAsync(System.Guid)">
            <summary>
            Updating scheme of specific process 
            </summary>
            <param name="processId">Process id</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.UpdateSchemeIfObsoleteAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Updating scheme of specific process (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="parameters">Parameters for creating scheme of process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.PreExecuteFromInitialActivityAsync(System.Guid,System.Boolean)">
            <summary>
            Pre-execution from initial activity of the process (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="ignoreCurrentStateCheck">If false and Current State Name and State Name of Current Activity is different (in case of scheme upgrade) do not run pre-execution</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.PreExecuteFromCurrentActivityAsync(System.Guid,System.Boolean)">
            <summary>
            Pre-execution from current activity of the process (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="ignoreCurrentStateCheck">If false and Current State Name and State Name of Current Activity is different (in case of scheme upgrade) do not run pre-execution</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.PreExecuteAsync(System.Guid,System.String,System.Boolean)">
            <summary>
            Pre-execution from specified activity of the process (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="fromActivityName">Activity name which begins pre-execution</param>
            <param name="ignoreCurrentStateCheck">If false and Current State Name and State Name of Current Activity is different (in case of scheme upgrade) do not run pre-execution</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetInitialCommandsAsync(System.String,System.String)">
            <summary>
            Return the list of commands which is availiable from initial activity for specified user (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="identityId">User id for whom formed initial commands list</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetInitialCommandsAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Return the list of commands which is availiable from initial activity for specified users (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="identityIds">List of User ids for which formed initial commands list</param>
            <param name="processParameters">Parameters for creating scheme of process</param>
            <param name="commandNameFilter">Selects only the specified command if not null </param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableCommandsAsync(System.Guid,System.String)">
            <summary>
            Return the list of commands which is availiable from current activity for specified user (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="identityId">User id for whom formed initial commands list</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableCommandsAsync(System.Guid,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Return the list of commands which is availiable from current activity for specified user (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="identityIds">List of User ids for which formed initial commands list</param>
            <param name="commandNameFilter">Selects only the specified command if not null</param>
            <param name="mainIdentityId">User id for priority check of rules</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.ExecuteCommandAsync(System.Guid,System.String,System.String,OptimaJet.Workflow.Core.Runtime.WorkflowCommand)">
            <summary>
            Execute specified command for specified users (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="identityId">The user id which execute command</param>
            <param name="impersonatedIdentityId">The user id for whom executes command (impersonation)</param>
            <param name="command">Command to execute</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetInitialStateAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Return the initial state for process scheme (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="processParameters">Parameters for creating scheme of process</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetCurrentStateAsync(System.Guid)">
            <summary>
            Return the current state of specified process (async version)
            </summary>
            <param name="processId">Process id</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetCurrentStateNameAsync(System.Guid)">
            <summary>
            Return the current state name of specified process (async version)
            </summary>
            <param name="processId">Process id</param>
            <returns>Name of current state</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetCurrentActivityNameAsync(System.Guid)">
            <summary>
            Return the current activity name of specified process (async version)
            </summary>
            <param name="processId">Process id</param>
            <returns>Current activity name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableStateToSetAsync(System.Guid)">
            <summary>
            Get the list of all states which available for set of specified process localized in current culture (async version)
            </summary>
            <param name="processId">Process id</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableStateToSetAsync(System.Guid,System.Globalization.CultureInfo)">
            <summary>
            Get the list of all states which available for set of specified process localized in specified culture (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="culture">Culture to localize state names</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableStateToSetAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get the list of all states which available for set of specified scheme in current culture (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="parameters">The parameters for creating scheme of process</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableStateToSetAsync(System.String,System.Globalization.CultureInfo,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get the list of all states which available for set of specified scheme in specified culture (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="culture">Culture to localize state names</param>
            <param name="parameters">The parameters for creating scheme of process</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetStateAsync(System.Guid,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Set specified state for specified process (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="identityId">The user id which set the state</param>
            <param name="impersonatedIdentityId">The user id for whom sets the state (impersonation)</param>
            <param name="stateName">State name to set</param>
            <param name="parameters">Dictionary of ProcessInstance parameters which transferred to executed actions</param>
            <param name="preventExecution">Actions due to transition process do not executed if true</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAllActorsForAllCommandTransitionsAsync(System.Guid,System.Boolean,System.String)">
            <summary>
            Get the list of user ids which can execute any command for specified process activity (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAllActorsForDirectCommandTransitionsAsync(System.Guid,System.Boolean,System.String)">
            <summary>
            Get the list of user ids which can execute any command bound whith direct transitions (by transition classifier) for specified process activity (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAllActorsForDirectAndUndefinedCommandTransitionsAsync(System.Guid,System.Boolean,System.String)">
            <summary>
            Get the list of user ids which can execute any command bound whith direct or undefined transitions (by transition classifier) for specified process activity (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAllActorsForReverseCommandTransitionsAsync(System.Guid,System.Boolean,System.String)">
            <summary>
            Get the list of user ids which can execute any command bound whith reverse transitions (by transition classifier) for specified process activity (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessSchemeAsync(System.Guid)">
            <summary>
            Get procees definition (parsed scheme) for specified process (async version)
            </summary>
            <param name="processId">Process id</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/> object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetLocalizedStateNameBySchemeCodeAsync(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get localized state name for specified scheme in current culture (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="stateName">State name to localize</param>
            <param name="parameters">The parameters for creating </param>
            <returns>Localized state name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessStatusAsync(System.Guid)">
            <summary>
            Get status of specified process (async version)
            </summary>
            <param name="processId">Process id</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Persistence.ProcessStatus"/> object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetLocalizedStateNameBySchemeIdAsync(System.Guid,System.String)">
            <summary>
            Get localized state name for specified scheme in current culture (async version)
            </summary>
            <param name="schemeId">Id of the scheme</param>
            <param name="stateName">State name to localize</param>
            <returns>Localized state name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetLocalizedStateNameAsync(System.Guid,System.String)">
            <summary>
            Get localized state name for specified process in current culture (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="stateName">State name to localize</param>
            <returns>Localized state name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetLocalizedCommandNameAsync(System.Guid,System.String)">
            <summary>
            Get localized command name for specified process in current culture (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="commandName">Command name to localize</param>
            <returns>Localized command name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetLocalizedCommandNameBySchemeIdAsync(System.Guid,System.String)">
            <summary>
            Get localized command name for specified scheme in current culture (async version)
            </summary>
            <param name="schemeId">Id of the scheme</param>
            <param name="commandName">Command name to localize</param>
            <returns>Localized command name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessInstanceAndFillProcessParametersAsync(System.Guid)">
            <summary>
            Get process instance with all parameters for specified process id (async version)
            </summary>
            <param name="processId">Process id</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Model.ProcessInstance"/> object</returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.Id">
            <summary>
            Runtime identifier
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.IsAutoUpdateSchemeBeforeGetAvailableCommands">
            <summary>
            Allow automatic schema of a process update before getting the commands list if its allowed in current activity
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.OnNeedDeterminingParameters">
            <summary>
            Raises when runtime need to obtain parameters for creating the scheme of the process
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.OnSchemaWasChanged">
            <summary>
            Raises when the scheme of the process was changed
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.OnWorkflowError">
            <summary>
            Raises when workflow error occurred
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.OnStartingTransitionNotFound">
            <summary>
            Raises when runtime can not find starting transition of a subprocess in a new root schem
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.RuleProvider">
            <summary>
            Instance of the Workflow rule provider <see cref="T:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.Builder">
            <summary>
            Instance of the Workflow builder <see cref="T:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.TimerManager">
            <summary>
            Instance of the Timer manager <see cref="T:OptimaJet.Workflow.Core.Runtime.ITimerManager"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.PersistenceProvider">
            <summary>
            Instance of the Persistence provider <see cref="T:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.ActionProvider">
            <summary>
            Instance of the Action provider <see cref="T:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider"/>
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.ProcessStatusChanged">
            <summary>
            Raises when the status of the procees <see cref="T:OptimaJet.Workflow.Core.Persistence.ProcessStatus"/> was changed
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SchemeParsingCulture">
            <summary>
            Culture for parsing some text parameters from scheme. Default is InvariantCulture
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.RuntimeDateTimeNow">
            <summary>
            Get date and time which used by runtime
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.UseUtcDateTimeAsRuntimeTime">
            <summary>
            Runtime use Utc date and time if true and Local date and time if false
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.IsCold">
            <summary>
            Runtime in cold start state if true
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CodeActionsCompillationEnable">
            <summary>
            Default value is true. Enable compillation for Code Actions <see cref="T:OptimaJet.Workflow.Core.Model.CodeActionDefinition"/> 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CodeActionsDebugMode">
            <summary>
            Default value is false. Enable debug in code action. You can put a brekpoint  by <see cref="M:System.Diagnostics.Debugger.Break"/> or /*break*/ in a code action's code
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithBuilder(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Builder.IWorkflowBuilder)">
            <summary>
            Сonfigures the runtime with specified builder <see cref="T:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder"/>
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="builder">The instance of the builder <see cref="T:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder"/></param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithDefaultBuilder``1(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Сonfigures the runtime with default (scheme in xml) builder <see cref="T:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder"/>
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithRuleProvider(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider)">
            <summary>
            Сonfigures the runtime with specified rule provider <see cref="T:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider"/>
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="ruleProvider">The instance of the rule provider <see cref="T:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider"/></param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithActionProvider(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider)">
            <summary>
            Сonfigures the runtime with specified action provider <see cref="T:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider"/>
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="workflowActionProvider">The instance of the action provider <see cref="T:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider"/></param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithPersistenceProvider(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Persistence.IPersistenceProvider)">
            <summary>
            Сonfigures the runtime with specified persistence provider <see cref="T:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider"/>
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="persistenceProvider">The instance of the persistence provider <see cref="T:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider"/></param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithBus(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Bus.IWorkflowBus)">
            <summary>
            Сonfigures the runtime with specified workflow bus <see cref="T:OptimaJet.Workflow.Core.Bus.IWorkflowBus"/>
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="bus">The instance of the workflow bus <see cref="T:OptimaJet.Workflow.Core.Bus.IWorkflowBus"/></param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.AttachDeterminingParametersGetter(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.EventHandler{OptimaJet.Workflow.Core.Runtime.NeedDeterminingParametersEventArgs})">
            <summary>
            Subscribe a event handler on OnNeedDeterminingParameters event to obtain parameters for creating a scheme of a process where a scheme was changed <see cref="T:OptimaJet.Workflow.Core.Runtime.NeedDeterminingParametersEventArgs"/>
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="determiningParametersGetter">Event handler <see cref="T:OptimaJet.Workflow.Core.Runtime.NeedDeterminingParametersEventArgs"/></param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.SwitchAutoUpdateSchemeBeforeGetAvailableCommandsOn(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Set  <see cref="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.IsAutoUpdateSchemeBeforeGetAvailableCommands"/> to true
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.SwitchAutoUpdateSchemeBeforeGetAvailableCommandsOn(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.EventHandler{OptimaJet.Workflow.Core.Runtime.NeedDeterminingParametersEventArgs})">
            <summary>
            Set  <see cref="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.IsAutoUpdateSchemeBeforeGetAvailableCommands"/> to true and add event handler to OnNeedDeterminingParameters event <see cref="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.OnNeedDeterminingParameters"/>
            </summary>
            <param name="runtime">The instance of the runtime</param>
              /// <param name="determiningParametersGetter">Event handler <see cref="T:OptimaJet.Workflow.Core.Runtime.NeedDeterminingParametersEventArgs"/></param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.SwitchAutoUpdateSchemeBeforeGetAvailableCommandsOff(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Set  <see cref="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.IsAutoUpdateSchemeBeforeGetAvailableCommands"/> to false
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.Start(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Start all workflow runtime services аnd compile global code actions
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.ColdStart(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Start all workflow runtime services except timers аnd compile global code actions
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithCache(OptimaJet.Workflow.Core.Builder.IWorkflowBuilder,OptimaJet.Workflow.Core.Cache.IParsedProcessCache)">
            <summary>
            Сonfigures the workflow builder with specified cache for parced processes <see cref="T:OptimaJet.Workflow.Core.Cache.IParsedProcessCache"/>
            </summary>
            <param name="bulder">The instance of the workflow builder</param>
            <param name="cache">The instance of the cache for parced processes <see cref="T:OptimaJet.Workflow.Core.Cache.IParsedProcessCache"/></param>
            <returns>Configured instance of the workflow builder</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithDefaultCache(OptimaJet.Workflow.Core.Builder.IWorkflowBuilder)">
            <summary>
            Сonfigures the workflow builder with default in memory cache for parced processes <see cref="T:OptimaJet.Workflow.Core.Cache.IParsedProcessCache"/>
            </summary>
            <param name="bulder">The instance of the workflow builder</param>
            <returns>Configured instance of the workflow builder</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithGenerator``1(OptimaJet.Workflow.Core.Builder.WorkflowBuilder{``0},OptimaJet.Workflow.Core.Generator.IWorkflowGenerator{``0})">
            <summary>
            Сonfigures the workflow builder with specified workflow scheme generator<see cref="T:OptimaJet.Workflow.Core.Generator.IWorkflowGenerator`1"/>
            </summary>
            <param name="bulder">The instance of the workflow builder</param>
            <param name="generator">The instance of the workflow scheme generator <see cref="T:OptimaJet.Workflow.Core.Generator.IWorkflowGenerator`1"/></param>
            <returns>Configured instance of the workflow builder</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithParser``1(OptimaJet.Workflow.Core.Builder.WorkflowBuilder{``0},OptimaJet.Workflow.Core.Parser.IWorkflowParser{``0})">
            <summary>
            Сonfigures the workflow builder with specified workflow scheme parser<see cref="T:OptimaJet.Workflow.Core.Parser.IWorkflowParser`1"/>
            </summary>
            <param name="bulder">The instance of the workflow builder</param>
            <param name="parser">The instance of the workflow scheme parser <see cref="T:OptimaJet.Workflow.Core.Parser.IWorkflowParser`1"/></param>
            <returns>Configured instance of the workflow builder</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithShemePersistenceProvider``1(OptimaJet.Workflow.Core.Builder.WorkflowBuilder{``0},OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider{``0})">
            <summary>
            Сonfigures the workflow builder with specified scheme persistence provider<see cref="T:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1"/>
            </summary>
            <param name="bulder">The instance of the workflow builder</param>
            <param name="schemePersistenceProvider">The instance of the scheme persistence provider <see cref="T:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1"/></param>
            <returns>Configured instance of the workflow builder</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithTimerManager(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Runtime.ITimerManager)">
            <summary>
            Сonfigures the runtime with specified timer manager <see cref="T:OptimaJet.Workflow.Core.Runtime.ITimerManager"/>
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="timerManager">The instance of the timer manager <see cref="T:OptimaJet.Workflow.Core.Runtime.ITimerManager"/></param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.EnableCodeActions(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Enable code action compillation in runtime
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.CodeActionsDebugOn(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Switch on compillation debug mode for code actions
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.DisableCodeActions(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Disable code action compillation in runtime
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.RegisterAssemblyForCodeActions(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Reflection.Assembly)">
            <summary>
            Register reference on assembly for compilation of code actions
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.WorkflowState">
            <summary>
            Represent a state of a process for use in an application
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowState.Name">
            <summary>
            System name of the state
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowState.VisibleName">
            <summary>
            Localized name of the state
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowState.SchemeCode">
            <summary>
            Code of the scheme of the process
            </summary>
        </member>
    </members>
</doc>
